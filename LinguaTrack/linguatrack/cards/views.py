from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.db.models import Q
from django.utils import timezone
from django.http import JsonResponse, HttpResponse
from datetime import datetime, timedelta
import time
from .models import Card, Schedule, StudySession, UserStats, AudioFile
from .forms import CardForm, StudyForm

from django.contrib.auth import login, authenticate
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User
from django.shortcuts import render, redirect
from django.contrib import messages
from django.views.decorators.csrf import csrf_exempt

import openpyxl
from django.contrib import messages
from .forms import ExcelImportForm

def register_view(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            username = form.cleaned_data.get('username')
            messages.success(request, f'–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è {username}!')

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            login(request, user)
            return redirect('cards:card_list')
    else:
        form = UserCreationForm()

    return render(request, 'registration/register.html', {'form': form})


def custom_login_view(request):
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(request, username=username, password=password)

        if user is not None:
            login(request, user)
            messages.success(request, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!')
            return redirect('cards:card_list')
        else:
            messages.error(request, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å')

    return render(request, 'registration/login.html')


# –ò–º–ø–æ—Ä—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –¥–ª—è Telegram
try:
    from telegram_bot.models import TelegramUser

    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False

try:
    from .utils import get_cards_for_review, update_card_statistics, generate_audio_for_card
except ImportError:
    # –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ utils –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
    def get_cards_for_review(user, limit=20):
        return Card.objects.filter(user=user).order_by('?')[:limit]


    def update_card_statistics(card, is_correct, response_time=None):
        card.times_studied += 1
        if is_correct:
            card.times_correct += 1
        card.save()


    def generate_audio_for_card(card):
        return None


@login_required
def card_list(request):
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    difficulty = request.GET.get('difficulty', '')
    search = request.GET.get('search', '')
    status = request.GET.get('status', '')

    cards = Card.objects.filter(user=request.user).select_related('schedule')

    if difficulty:
        cards = cards.filter(difficulty=difficulty)

    if search:
        cards = cards.filter(
            Q(word__icontains=search) |
            Q(translation__icontains=search)
        )

    if status == 'new':
        cards = cards.filter(times_studied=0)
    elif status == 'learning':
        cards = cards.filter(times_studied__gt=0, is_learned=False)
    elif status == 'learned':
        cards = cards.filter(is_learned=True)

    # –ö–∞—Ä—Ç–æ—á–∫–∏ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è
    due_cards_count = Card.objects.filter(
        user=request.user,
        schedule__next_review__lte=timezone.now()
    ).count()

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats, created = UserStats.objects.get_or_create(user=request.user)
    if created or stats.total_cards != cards.count():
        stats.total_cards = cards.count()
        stats.learned_cards = Card.objects.filter(user=request.user, is_learned=True).count()
        stats.save()

    context = {
        'cards': cards,
        'stats': stats,
        'due_cards_count': due_cards_count,
        'difficulty_filter': difficulty,
        'status_filter': status,
        'search_query': search,
        'difficulty_choices': Card.DIFFICULTY_CHOICES,
        'status_choices': [
            ('', '–í—Å–µ'),
            ('new', '–ù–æ–≤—ã–µ'),
            ('learning', '–ò–∑—É—á–∞—é—Ç—Å—è'),
            ('learned', '–í—ã—É—á–µ–Ω–Ω—ã–µ'),
        ]
    }

    return render(request, 'cards/card_list.html', context)


@login_required
def card_detail(request, pk):
    card = get_object_or_404(Card, pk=pk, user=request.user)

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ—Å—Å–∏–π –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    recent_sessions = StudySession.objects.filter(
        card=card, user=request.user
    )[:10]

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    try:
        schedule = card.schedule
        next_review = schedule.next_review
        is_due = schedule.next_review <= timezone.now()
    except Schedule.DoesNotExist:
        schedule = None
        next_review = None
        is_due = True

    context = {
        'card': card,
        'recent_sessions': recent_sessions,
        'schedule': schedule,
        'next_review': next_review,
        'is_due': is_due,
        'has_audio': hasattr(card, 'audio') and card.audio.audio_file,
    }

    return render(request, 'cards/card_detail.html', context)


@login_required
def card_create(request):
    if request.method == 'POST':
        form = CardForm(request.POST)
        if form.is_valid():
            card = form.save(commit=False)
            card.user = request.user
            card.save()

            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            Schedule.objects.create(
                card=card,
                next_review=timezone.now() + timedelta(hours=1)
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            try:
                generate_audio_for_card(card)
                messages.success(request, '–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ê—É–¥–∏–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...')
            except:
                messages.success(request, '–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!')

            return redirect('cards:card_detail', pk=card.pk)
    else:
        form = CardForm()

    return render(request, 'cards/card_form.html', {
        'form': form,
        'title': '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É'
    })


@login_required
def card_edit(request, pk):
    card = get_object_or_404(Card, pk=pk, user=request.user)

    if request.method == 'POST':
        form = CardForm(request.POST, instance=card)
        if form.is_valid():
            form.save()
            messages.success(request, '–ö–∞—Ä—Ç–æ—á–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
            return redirect('cards:card_detail', pk=card.pk)
    else:
        form = CardForm(instance=card)

    return render(request, 'cards/card_form.html', {
        'form': form,
        'title': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É',
        'card': card
    })


@login_required
def card_delete(request, pk):
    card = get_object_or_404(Card, pk=pk, user=request.user)

    if request.method == 'POST':
        card.delete()
        messages.success(request, '–ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞!')
        return redirect('cards:card_list')

    return render(request, 'cards/card_confirm_delete.html', {'card': card})


@login_required
def study_cards(request):
    return redirect('cards:smart_study')


@login_required
def next_card(request):
    return redirect('cards:smart_study')


@login_required
def smart_study(request):
    cards_to_study = get_cards_for_review(request.user, limit=20)

    if not cards_to_study:
        messages.info(request, '–ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è! –û—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ! üéâ')
        return redirect('cards:card_list')

    # –¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
    current_card_id = request.session.get('smart_study_card_id')
    studied_cards = request.session.get('smart_studied_cards', [])
    session_start_time = request.session.get('session_start_time')

    if not session_start_time:
        request.session['session_start_time'] = time.time()

    if not current_card_id or current_card_id in studied_cards:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        remaining_cards = [c.id for c in cards_to_study if c.id not in studied_cards]

        if not remaining_cards:
            # –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            session_time = time.time() - request.session.get('session_start_time', time.time())
            total_studied = len(studied_cards)

            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            request.session.pop('smart_study_card_id', None)
            request.session.pop('smart_studied_cards', None)
            request.session.pop('session_start_time', None)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è
            stats, _ = UserStats.objects.get_or_create(user=request.user)
            stats.study_time_minutes += round(session_time / 60)
            stats.current_week_studied += total_studied
            stats.save()

            messages.success(request,
                             f'üéâ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò–∑—É—á–µ–Ω–æ: {total_studied} –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞ {round(session_time / 60, 1)} –º–∏–Ω')
            return redirect('cards:study_results')

        current_card_id = remaining_cards[0]
        request.session['smart_study_card_id'] = current_card_id

    card = get_object_or_404(Card, id=current_card_id, user=request.user)

    if request.method == 'POST':
        form = StudyForm(request.POST)
        if form.is_valid():
            user_answer = form.cleaned_data['answer'].strip().lower()
            correct_answer = card.translation.strip().lower()

            is_correct = user_answer == correct_answer

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è SM-2
            if is_correct:
                if user_answer == card.translation.strip():  # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    quality = 5  # perfect
                    result = 'perfect'
                else:
                    quality = 4  # correct
                    result = 'correct'
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                similarity = len(set(user_answer.split()) & set(correct_answer.split()))
                if similarity > 0:
                    quality = 3  # hard
                    result = 'hard'
                else:
                    quality = 2  # incorrect
                    result = 'incorrect'

            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑—É—á–µ–Ω–∏—è
            StudySession.objects.create(
                card=card,
                user=request.user,
                result=result,
                quality_score=quality,
                user_answer=form.cleaned_data['answer']
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—Ä—Ç–æ—á–∫–∏
            update_card_statistics(card, is_correct)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É SM-2
            schedule, created = Schedule.objects.get_or_create(
                card=card,
                defaults={
                    'next_review': timezone.now() + timedelta(days=1)
                }
            )
            schedule.calculate_next_review(quality)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑—É—á–µ–Ω–Ω—ã–µ
            if 'smart_studied_cards' not in request.session:
                request.session['smart_studied_cards'] = []
            request.session['smart_studied_cards'].append(card.id)
            request.session.modified = True

            context = {
                'card': card,
                'user_answer': form.cleaned_data['answer'],
                'is_correct': is_correct,
                'quality_score': quality,
                'next_review': schedule.next_review,
                'show_result': True,
                'studied_count': len(request.session['smart_studied_cards']),
                'total_count': len(cards_to_study)
            }

            return render(request, 'cards/smart_study.html', context)
    else:
        form = StudyForm()

    context = {
        'card': card,
        'form': form,
        'show_result': False,
        'studied_count': len(studied_cards),
        'total_count': len(cards_to_study)
    }

    return render(request, 'cards/smart_study.html', context)


@login_required
def next_smart_card(request):
    current_card_id = request.session.get('smart_study_card_id')
    if current_card_id:
        studied_cards = request.session.get('smart_studied_cards', [])
        if current_card_id not in studied_cards:
            studied_cards.append(current_card_id)
            request.session['smart_studied_cards'] = studied_cards
        request.session.pop('smart_study_card_id', None)

    return redirect('cards:smart_study')


@login_required
def study_results(request):
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    recent_sessions = StudySession.objects.filter(
        user=request.user
    ).select_related('card')[:20]

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
    week_ago = timezone.now() - timedelta(days=7)
    week_sessions = StudySession.objects.filter(
        user=request.user,
        created_at__gte=week_ago
    )

    week_stats = {
        'total': week_sessions.count(),
        'correct': week_sessions.filter(result__in=['perfect', 'correct']).count(),
        'cards_studied': week_sessions.values('card').distinct().count()
    }

    # –ö–∞—Ä—Ç–æ—á–∫–∏ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é
    due_cards = Card.objects.filter(
        user=request.user,
        schedule__next_review__lte=timezone.now()
    ).count()

    stats, _ = UserStats.objects.get_or_create(user=request.user)

    # –î–æ–±–∞–≤—å—Ç–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
    cards_left_to_goal = max(0, stats.weekly_goal - stats.current_week_studied)

    context = {
        'recent_sessions': recent_sessions,
        'week_stats': week_stats,
        'due_cards': due_cards,
        'stats': stats,
        'cards_left_to_goal': cards_left_to_goal,  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
    }

    return render(request, 'cards/study_results.html', context)

@login_required
def generate_audio_view(request, pk):
    card = get_object_or_404(Card, pk=pk, user=request.user)

    try:
        audio = generate_audio_for_card(card)
        if audio:
            messages.success(request, '–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!')
        else:
            messages.error(request, '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ')
    except Exception as e:
        messages.error(request, f'–û—à–∏–±–∫–∞: {e}')

    return redirect('cards:card_detail', pk=pk)


@login_required
def play_audio(request, pk):
    card = get_object_or_404(Card, pk=pk, user=request.user)

    try:
        audio = card.audio
        if audio.audio_file:
            response = HttpResponse(audio.audio_file.read(), content_type='audio/mpeg')
            response['Content-Disposition'] = f'inline; filename="{card.word}.mp3"'
            return response
    except AudioFile.DoesNotExist:
        pass

    return JsonResponse({'error': '–ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}, status=404)


# Telegram —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
if TELEGRAM_AVAILABLE:
    @login_required
    def telegram_stats(request):
        try:
            telegram_user = request.user.telegram_profile

            # –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
            week_ago = timezone.now() - timedelta(days=7)
            recent_messages = telegram_user.messages.filter(
                sent_at__gte=week_ago
            ).order_by('-sent_at')[:20]

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
            message_stats = {}
            for msg in recent_messages:
                message_stats[msg.message_type] = message_stats.get(msg.message_type, 0) + 1

            context = {
                'telegram_user': telegram_user,
                'recent_messages': recent_messages,
                'message_stats': message_stats,
            }

            return render(request, 'telegram_bot/stats.html', context)

        except TelegramUser.DoesNotExist:
            messages.info(request, '–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Telegram –∞–∫–∫–∞—É–Ω—Ç')
            return redirect('/telegram/link/')

@login_required
def import_excel(request):
    if request.method == 'POST':
        form = ExcelImportForm(request.POST, request.FILES)
        if form.is_valid():
            excel_file = request.FILES['excel_file']

            try:
                # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
                workbook = openpyxl.load_workbook(excel_file)
                sheet = workbook.active

                created_count = 0
                skipped_count = 0

                # –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
                for row in sheet.iter_rows(min_row=2, values_only=True):
                    if len(row) >= 2 and row[0] and row[1]:
                        word = str(row[0]).strip()
                        translation = str(row[1]).strip()

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
                        if not Card.objects.filter(user=request.user, word__iexact=word).exists():
                            Card.objects.create(
                                user=request.user,
                                word=word,
                                translation=translation,
                                example=str(row[2]).strip() if len(row) > 2 and row[2] else '',
                                difficulty='beginner'
                            )
                            created_count += 1
                        else:
                            skipped_count += 1

                messages.success(
                    request,
                    f'‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ–∑–¥–∞–Ω–æ: {created_count}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}'
                )

            except Exception as e:
                messages.error(request, f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}')

            return redirect('cards:card_list')
    else:
        form = ExcelImportForm()

    return render(request, 'cards/import_excel.html', {'form': form})


@login_required
def bulk_delete_cards(request):
    """–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫"""
    if request.method == 'POST':
        card_ids = request.POST.getlist('selected_cards')

        if card_ids:
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            deleted_count = Card.objects.filter(
                id__in=card_ids,
                user=request.user
            ).count()

            Card.objects.filter(
                id__in=card_ids,
                user=request.user
            ).delete()

            messages.success(
                request,
                f'‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∫–∞—Ä—Ç–æ—á–µ–∫'
            )
        else:
            messages.warning(request, '‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏')

    return redirect('cards:card_list')
