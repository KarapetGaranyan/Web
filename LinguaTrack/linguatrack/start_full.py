import os
import sys
import subprocess
import threading
import time
import platform
import signal
from pathlib import Path


class LinguaTrackRunner:
    def __init__(self):
        self.processes = []
        self.threads = []

    def run_redis(self):
        """–ó–∞–ø—É—Å–∫ Redis —Å–µ—Ä–≤–µ—Ä–∞"""
        print("üî¥ –ó–∞–ø—É—Å–∫ Redis —Å–µ—Ä–≤–µ—Ä–∞...")
        try:
            if platform.system() == "Windows":
                # –î–ª—è Windows - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ WSL –∏–ª–∏ Windows –≤–µ—Ä—Å–∏—é Redis
                redis_cmd = ["wsl", "redis-server"]
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è Windows Redis:
                # redis_cmd = ["redis-server.exe"]
            else:
                redis_cmd = ["redis-server"]

            process = subprocess.Popen(
                redis_cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            self.processes.append(('Redis', process))
            print("‚úÖ Redis —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Redis: {e}")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Redis:")
            print("   Windows: https://github.com/microsoftarchive/redis/releases")
            print("   Or use WSL: wsl --install")

    def run_django(self):
        """–ó–∞–ø—É—Å–∫ Django —Å–µ—Ä–≤–µ—Ä–∞"""
        print("üåê –ó–∞–ø—É—Å–∫ Django —Å–µ—Ä–≤–µ—Ä–∞...")
        try:
            process = subprocess.Popen([
                sys.executable, 'manage.py', 'runserver'
            ])
            self.processes.append(('Django', process))
            print("‚úÖ Django —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:8000")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Django: {e}")

    def run_celery_worker(self):
        """–ó–∞–ø—É—Å–∫ Celery Worker"""
        print("‚öôÔ∏è –ó–∞–ø—É—Å–∫ Celery Worker...")
        try:
            # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º --pool=solo
            cmd = [
                sys.executable, '-m', 'celery',
                '-A', 'linguatrack',
                'worker',
                '--loglevel=info',
                '--pool=solo'  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Windows
            ]

            process = subprocess.Popen(cmd)
            self.processes.append(('Celery Worker', process))
            print("‚úÖ Celery Worker –∑–∞–ø—É—â–µ–Ω (Windows —Ä–µ–∂–∏–º)")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Celery Worker: {e}")

    def run_celery_beat(self):
        """–ó–∞–ø—É—Å–∫ Celery Beat (–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫)"""
        print("‚è∞ –ó–∞–ø—É—Å–∫ Celery Beat...")
        try:
            process = subprocess.Popen([
                sys.executable, '-m', 'celery',
                '-A', 'linguatrack',
                'beat',
                '--loglevel=info'
            ])
            self.processes.append(('Celery Beat', process))
            print("‚úÖ Celery Beat –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Celery Beat: {e}")

    def run_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ manage.py runbot
            process = subprocess.Popen([
                sys.executable, 'manage.py', 'runbot'
            ])
            self.processes.append(('Telegram Bot', process))
            print("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ manage.py runbot: {e}")
            try:
                # Fallback - –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ run_bot.py
                process = subprocess.Popen([
                    sys.executable, 'run_bot.py'
                ])
                self.processes.append(('Telegram Bot', process))
                print("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ run_bot.py")
            except Exception as e2:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e2}")

    def start_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã LinguaTrack")
        print("=" * 50)

        # 1. Redis (–¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –ø–µ—Ä–≤—ã–º)
        self.run_redis()
        time.sleep(2)

        # 2. Django —Å–µ—Ä–≤–µ—Ä
        self.run_django()
        time.sleep(3)

        # 3. Celery Worker
        self.run_celery_worker()
        time.sleep(2)

        # 4. Celery Beat
        self.run_celery_beat()
        time.sleep(2)

        # 5. Telegram Bot
        self.run_telegram_bot()

        print("\n" + "=" * 50)
        print("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!")
        print("üåê Django: http://127.0.0.1:8000")
        print("ü§ñ Telegram: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É")
        print("üî¥ Redis: localhost:6379")
        print("\nüí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
        print("=" * 50)

    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")

        for name, process in self.processes:
            try:
                print(f"üîΩ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
                process.terminate()
                process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                print(f"‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
                process.kill()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")

        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    def run(self):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
        try:
            self.start_all()

            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            while True:
                time.sleep(1)

        except KeyboardInterrupt:
            self.stop_all()
            sys.exit(0)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.stop_all()
            sys.exit(1)


def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

    required_packages = ['django', 'celery', 'redis', 'aiogram']
    missing_packages = []

    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package}")

    if missing_packages:
        print(f"\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:")
        print(f"pip install {' '.join(missing_packages)}")
        return False

    return True


def main():
    print("üéØ LinguaTrack - –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_requirements():
        sys.exit(1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    if not Path('manage.py').exists():
        print("‚ùå –§–∞–π–ª manage.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫
    runner = LinguaTrackRunner()
    runner.run()


if __name__ == '__main__':
    main()