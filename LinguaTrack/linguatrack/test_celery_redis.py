# 1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª test_celery_redis.py –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞:

# !/usr/bin/env python
"""–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery –∏ Redis"""
import os
import django
import time
from datetime import datetime

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'linguatrack.settings')
django.setup()


def test_redis():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("üî¥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis...")
    try:
        import redis
        r = redis.Redis(host='localhost', port=6379, db=0)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å/—á—Ç–µ–Ω–∏–µ
        test_key = 'linguatrack_test'
        test_value = f'test_value_{datetime.now().timestamp()}'

        r.set(test_key, test_value)
        stored_value = r.get(test_key)

        if stored_value and stored_value.decode() == test_value:
            print("‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            r.delete(test_key)  # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            return True
        else:
            print("‚ùå Redis –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Redis: {e}")
        return False


def test_celery_basic():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã Celery"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery...")
    try:
        from celery import current_app

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Celery
        inspect = current_app.control.inspect()
        stats = inspect.stats()

        if stats:
            print("‚úÖ Celery Worker –∞–∫—Ç–∏–≤–µ–Ω")
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö worker'–æ–≤: {len(stats)}")
            return True
        else:
            print("‚ùå Celery Worker –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Celery: {e}")
        return False


def test_celery_task():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á Celery"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á...")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
        from celery import shared_task

        @shared_task
        def test_task(message):
            return f"–ü–æ–ª—É—á–µ–Ω–æ: {message} –≤ {datetime.now()}"

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–¥–ª—è —Ç–µ—Å—Ç–∞)
        result = test_task.apply_async(args=['–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'])

        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥)
        try:
            task_result = result.get(timeout=10)
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task_result}")
            return True
        except Exception as e:
            print(f"‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å: {e}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        return False


def test_scheduled_tasks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    print("\n‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery Beat...")
    try:
        from celery import current_app

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
        inspect = current_app.control.inspect()
        scheduled = inspect.scheduled()

        if scheduled:
            print("‚úÖ Celery Beat —Ä–∞–±–æ—Ç–∞–µ—Ç")
            total_tasks = sum(len(tasks) for tasks in scheduled.values())
            print(f"   –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {total_tasks}")
        else:
            print("‚ö†Ô∏è Celery Beat –∑–∞–ø—É—â–µ–Ω, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
        beat_schedule = current_app.conf.beat_schedule
        if beat_schedule:
            print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á: {len(beat_schedule)}")
            for task_name in beat_schedule.keys():
                print(f"   - {task_name}")
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Celery Beat: {e}")
        return False


def test_telegram_tasks():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –∑–∞–¥–∞—á"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∑–∞–¥–∞—á...")
    try:
        # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏
        from telegram_bot.tasks import send_daily_reminders, send_weekly_stats

        print("‚úÖ Telegram –∑–∞–¥–∞—á–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
        from telegram_bot.models import TelegramUser
        users_count = TelegramUser.objects.count()
        print(f"   Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Telegram –∑–∞–¥–∞—á: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LinguaTrack –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    print("=" * 50)

    results = []

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    results.append(("Redis", test_redis()))
    results.append(("Celery Basic", test_celery_basic()))
    results.append(("Celery Tasks", test_celery_task()))
    results.append(("Celery Beat", test_scheduled_tasks()))
    results.append(("Telegram Tasks", test_telegram_tasks()))

    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")

    passed = 0
    for name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {name}: {status}")
        if result:
            passed += 1

    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")

    if passed == len(results):
        print("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")


if __name__ == '__main__':
    main()

# 2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª test_tasks.py –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á:

# !/usr/bin/env python
"""–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á"""
import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'linguatrack.settings')
django.setup()

from celery import shared_task


@shared_task
def hello_world():
    return "Hello from Celery!"


@shared_task
def add_numbers(x, y):
    return x + y


if __name__ == '__main__':
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á...")

    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á
    result1 = hello_world.delay()
    result2 = add_numbers.delay(4, 6)

    print(f"–ó–∞–¥–∞—á–∞ 1 ID: {result1.id}")
    print(f"–ó–∞–¥–∞—á–∞ 2 ID: {result2.id}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
    try:
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç 1: {result1.get(timeout=10)}")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç 2: {result2.get(timeout=10)}")
        print("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

# 3. –ö–æ–º–∞–Ω–¥–∞ Django –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–æ–∑–¥–∞–π—Ç–µ cards/management/commands/test_celery.py):

from django.core.management.base import BaseCommand
from celery import current_app
from django.conf import settings
import redis


class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Celery –∏ Redis'

    def handle(self, *args, **options):
        self.stdout.write("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
        try:
            r = redis.Redis.from_url(settings.CELERY_BROKER_URL)
            r.ping()
            self.stdout.write(self.style.SUCCESS("‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω"))
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Celery
        try:
            inspect = current_app.control.inspect()
            stats = inspect.stats()

            if stats:
                self.stdout.write(self.style.SUCCESS(f"‚úÖ Celery –∞–∫—Ç–∏–≤–µ–Ω ({len(stats)} worker)"))

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
                active = inspect.active()
                total_active = sum(len(tasks) for tasks in active.values()) if active else 0
                self.stdout.write(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {total_active}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                registered = inspect.registered()
                if registered:
                    total_registered = sum(len(tasks) for tasks in registered.values())
                    self.stdout.write(f"   –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {total_registered}")

            else:
                self.stdout.write(self.style.ERROR("‚ùå Celery worker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"))

        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞ Celery: {e}"))