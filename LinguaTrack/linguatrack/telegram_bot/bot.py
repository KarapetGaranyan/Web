import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from django.conf import settings
from asgiref.sync import sync_to_async
import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'linguatrack.settings')
django.setup()

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´:
from cards.models import Card, StudySession, UserStats, Schedule
from telegram_bot.models import TelegramUser, BotMessage, LinkToken  # ‚Üê –î–æ–±–∞–≤–ª–µ–Ω LinkToken
from django.contrib.auth.models import User
from django.utils import timezone
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()


class StudyStates(StatesGroup):
    waiting_for_answer = State()


def create_telegram_data(user):
    """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
    return {
        'id': user.id,
        'username': user.username or '',
        'first_name': user.first_name or '',
        'last_name': user.last_name or '',
        'language_code': user.language_code or 'ru'
    }


def get_or_create_user_sync(telegram_data):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
    try:
        telegram_user = TelegramUser.objects.select_related('user').get(
            telegram_id=telegram_data['id']
        )
        return telegram_user
    except TelegramUser.DoesNotExist:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None
        first_name = telegram_data.get('first_name') or ''
        last_name = telegram_data.get('last_name') or ''
        username = telegram_data.get('username') or ''
        language_code = telegram_data.get('language_code') or 'ru'

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π username –¥–ª—è Django
        base_username = f"tg_{telegram_data['id']}"
        django_username = base_username
        counter = 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username
        while User.objects.filter(username=django_username).exists():
            django_username = f"{base_username}_{counter}"
            counter += 1

        # –°–æ–∑–¥–∞–µ–º Django –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ —Å—Ä–µ–∑–∞–º–∏
        django_user = User.objects.create(
            username=django_username,
            first_name=first_name[:30] if first_name else '',
            last_name=last_name[:30] if last_name else ''
        )

        # –°–æ–∑–¥–∞–µ–º Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ —Å—Ä–µ–∑–∞–º–∏
        telegram_user = TelegramUser.objects.create(
            user=django_user,
            telegram_id=telegram_data['id'],
            username=username[:100] if username else '',
            first_name=first_name[:100] if first_name else '',
            last_name=last_name[:100] if last_name else '',
            language_code=language_code
        )

        return telegram_user
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        import traceback
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        print(f"–î–∞–Ω–Ω—ã–µ Telegram: {telegram_data}")
        print(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        raise


def log_message_sync(telegram_user, msg_type, content):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    return BotMessage.objects.create(
        telegram_user=telegram_user,
        message_type=msg_type,
        content=content
    )


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏
get_or_create_user = sync_to_async(get_or_create_user_sync)
log_message = sync_to_async(log_message_sync)


@dp.message(CommandStart())
async def start_command(message: Message):
    telegram_data = create_telegram_data(message.from_user)
    telegram_user = await get_or_create_user(telegram_data)

    welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LinguaTrack!

–ü—Ä–∏–≤–µ—Ç, {telegram_user.first_name or '–¥—Ä—É–≥'}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏–∑—É—á–∞—Ç—å —Å–ª–æ–≤–∞ –ø—Ä—è–º–æ –≤ Telegram.

üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/link - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/today - –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/test - –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
/progress - –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/cards - –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
/help - –ü–æ–º–æ—â—å

–ù–∞—á–Ω–µ–º –∏–∑—É—á–µ–Ω–∏–µ? üöÄ
"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today")],
        [InlineKeyboardButton(text="üéØ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç", callback_data="test")],
        [InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="progress")]
    ])

    await message.answer(welcome_text, reply_markup=keyboard)
    await log_message(telegram_user, "start", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")


@dp.message(Command("link"))
async def link_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–æ–∫–µ–Ω–∞"""
    command_parts = message.text.split(maxsplit=1)

    if len(command_parts) < 2:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "üìã –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ LinguaTrack\n"
            "üîó –§–æ—Ä–º–∞—Ç: /link –≤–∞—à_—Ç–æ–∫–µ–Ω\n\n"
            "üí° –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è"
        )
        return

    token = command_parts[1].strip()

    @sync_to_async
    def process_link_token(telegram_id, username, first_name, last_name, language_code, token):
        from telegram_bot.models import LinkToken, TelegramUser
        from cards.models import Card

        try:
            # –ò—â–µ–º —Ç–æ–∫–µ–Ω
            link_token = LinkToken.objects.get(token=token)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if not link_token.is_valid:
                if link_token.is_expired:
                    return False, "‚è∞ –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∞ —Å–∞–π—Ç–µ."
                elif link_token.is_used:
                    return False, "üîÑ –¢–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π."
                else:
                    return False, "‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω."

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç
            existing_tg_user = TelegramUser.objects.filter(telegram_id=telegram_id).first()

            if existing_tg_user:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤—è–∑—å
                existing_tg_user.user = link_token.user
                existing_tg_user.username = username or ''
                existing_tg_user.first_name = first_name or ''
                existing_tg_user.last_name = last_name or ''
                existing_tg_user.language_code = language_code or 'ru'
                existing_tg_user.is_active = True
                existing_tg_user.save()
                telegram_user = existing_tg_user
                action = "–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω"
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
                telegram_user = TelegramUser.objects.create(
                    user=link_token.user,
                    telegram_id=telegram_id,
                    username=username or '',
                    first_name=first_name or '',
                    last_name=last_name or '',
                    language_code=language_code or 'ru'
                )
                action = "–ø—Ä–∏–≤—è–∑–∞–Ω"

            # –û—Ç–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            link_token.use_token(telegram_id)

            # –°—á–∏—Ç–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cards_count = Card.objects.filter(user=link_token.user).count()

            return True, {
                'user': link_token.user,
                'cards_count': cards_count,
                'action': action,
                'telegram_user': telegram_user
            }

        except LinkToken.DoesNotExist:
            return False, "üîç –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞."
        except Exception as e:
            return False, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏: {str(e)}"

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø—Ä–∏–≤—è–∑–∫—É
    success, result = await process_link_token(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name,
        message.from_user.language_code,
        token
    )

    if success:
        user_info = result
        response_text = f"""
‚úÖ **–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ {user_info['action']}!**

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{user_info['user'].username}**
üìö –î–æ—Å—Ç—É–ø–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: **{user_info['cards_count']}**

üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:

üìö /today - –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
üéØ /test - –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç  
üìä /progress - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üìù /cards - —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫

üí° –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫, —Å–æ–∑–¥–∞–π—Ç–µ –∏—Ö –Ω–∞ —Å–∞–π—Ç–µ!

–ù–∞—á–Ω–µ–º –∏–∑—É—á–µ–Ω–∏–µ? üöÄ
"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìö –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today")],
            [InlineKeyboardButton(text="üéØ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç", callback_data="test")],
            [InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="progress")]
        ])

        await message.answer(response_text, reply_markup=keyboard, parse_mode="Markdown")

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É
        await log_message(user_info['telegram_user'], "link_success",
                          f"–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∫ {user_info['user'].username}")

    else:
        error_message = result
        await message.answer(f"{error_message}\n\nüí° –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ LinguaTrack")

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_data = create_telegram_data(message.from_user)
        telegram_user = await get_or_create_user(telegram_data)
        await log_message(telegram_user, "link_error", f"–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞: {token[:8]}...")


@dp.message(Command("unlink"))
async def unlink_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–≤—è–∑–∫–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞"""

    @sync_to_async
    def process_unlink(telegram_id):
        try:
            telegram_user = TelegramUser.objects.get(telegram_id=telegram_id)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            linked_username = telegram_user.user.username
            cards_count = Card.objects.filter(user=telegram_user.user).count()

            # –û—Ç–≤—è–∑—ã–≤–∞–µ–º (—É–¥–∞–ª—è–µ–º —Å–≤—è–∑—å)
            telegram_user.delete()

            # –¢–∞–∫–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            LinkToken.objects.filter(telegram_id=telegram_id).update(is_used=True)

            return True, {
                'username': linked_username,
                'cards_count': cards_count
            }

        except TelegramUser.DoesNotExist:
            return False, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–∏—Å—Ç–µ–º–µ"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏: {str(e)}"

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–≤—è–∑–∞—Ç—å", callback_data="confirm_unlink"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_unlink")
        ]
    ])

    await message.answer(
        "üîì **–û—Ç–≤—è–∑–∫–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞**\n\n"
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å –≤–∞—à Telegram –æ—Ç LinguaTrack?\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–≤—è–∑–∫–∏:\n"
        "‚Ä¢ –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–∏–º –∫–∞—Ä—Ç–æ—á–∫–∞–º\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã\n"
        "‚Ä¢ –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –Ω—É–∂–µ–Ω –±—É–¥–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω\n\n"
        "–í–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@dp.callback_query(F.data == "confirm_unlink")
async def confirm_unlink_callback(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–≤—è–∑–∫–∏"""

    @sync_to_async
    def do_unlink(telegram_id):
        try:
            telegram_user = TelegramUser.objects.get(telegram_id=telegram_id)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            linked_username = telegram_user.user.username
            cards_count = Card.objects.filter(user=telegram_user.user).count()

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤—è–∑–∫—É
            BotMessage.objects.create(
                telegram_user=telegram_user,
                message_type="unlink",
                content=f"–û—Ç–≤—è–∑–∫–∞ –æ—Ç {linked_username}"
            )

            # –û—Ç–≤—è–∑—ã–≤–∞–µ–º (—É–¥–∞–ª—è–µ–º —Å–≤—è–∑—å)
            telegram_user.delete()

            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã
            LinkToken.objects.filter(telegram_id=telegram_id).update(is_used=True)

            return True, {
                'username': linked_username,
                'cards_count': cards_count
            }

        except TelegramUser.DoesNotExist:
            return False, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"

    success, result = await do_unlink(callback.from_user.id)

    if success:
        await callback.message.edit_text(
            f"‚úÖ **–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω!**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{result['username']}**\n"
            f"üìö –ö–∞—Ä—Ç–æ—á–µ–∫ –±—ã–ª–æ: **{result['cards_count']}**\n\n"
            f"üîó –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏:\n"
            f"1. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ\n"
            f"2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link\n\n"
            f"–£–¥–∞—á–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–æ–≤! üéì",
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            f"‚ùå {result}\n\n"
            f"–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="Markdown"
        )

    await callback.answer()


@dp.callback_query(F.data == "cancel_unlink")
async def cancel_unlink_callback(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –æ—Ç–≤—è–∑–∫–∏"""
    await callback.message.edit_text(
        "‚úÖ –û—Ç–≤—è–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º –∫ LinguaTrack.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.",
        parse_mode="Markdown"
    )
    await callback.answer("–û—Ç–≤—è–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


@dp.message(Command("today"))
async def today_command(message: Message):
    telegram_data = create_telegram_data(message.from_user)
    telegram_user = await get_or_create_user(telegram_data)

    @sync_to_async
    def get_due_cards():
        due_cards = []
        cards_with_schedule = Card.objects.filter(
            user=telegram_user.user
        ).prefetch_related('schedule')

        for card in cards_with_schedule:
            try:
                if card.schedule and card.schedule.next_review <= timezone.now():
                    due_cards.append(card)
            except Schedule.DoesNotExist:
                due_cards.append(card)

        return due_cards[:10]

    due_cards = await get_due_cards()

    if not due_cards:
        await message.answer(
            "üéâ –û—Ç–ª–∏—á–Ω–æ! –£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è.\n"
            "–ú–æ–∂–µ—à—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ!"
        )
        return

    cards_text = f"üìö –£ —Ç–µ–±—è {len(due_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é:\n\n"

    for i, card in enumerate(due_cards[:5], 1):
        cards_text += f"{i}. **{card.word}** ‚Äî {card.translation}\n"
        try:
            if hasattr(card, 'schedule') and card.schedule.repetitions > 0:
                cards_text += f"   –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {card.schedule.repetitions}\n"
        except:
            pass

    if len(due_cards) > 5:
        cards_text += f"\n... –∏ –µ—â–µ {len(due_cards) - 5} –∫–∞—Ä—Ç–æ—á–µ–∫"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ", callback_data="start_study")],
        [InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Å—Ç", callback_data="test")]
    ])

    await message.answer(cards_text, reply_markup=keyboard, parse_mode="Markdown")
    await log_message(telegram_user, "today", f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(due_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫")


@dp.message(Command("progress"))
async def progress_command(message: Message):
    telegram_data = create_telegram_data(message.from_user)
    telegram_user = await get_or_create_user(telegram_data)

    @sync_to_async
    def get_user_stats():
        try:
            stats = UserStats.objects.get(user=telegram_user.user)
        except UserStats.DoesNotExist:
            stats = UserStats.objects.create(user=telegram_user.user)

        due_cards_count = 0
        for card in Card.objects.filter(user=telegram_user.user):
            try:
                if hasattr(card, 'schedule') and card.schedule.next_review <= timezone.now():
                    due_cards_count += 1
            except:
                due_cards_count += 1

        week_ago = timezone.now() - timedelta(days=7)
        week_sessions = StudySession.objects.filter(
            user=telegram_user.user,
            created_at__gte=week_ago
        ).count()

        return stats, due_cards_count, week_sessions

    stats, due_cards_count, week_sessions = await get_user_stats()

    progress_text = f"""
üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üìö –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: **{stats.total_cards}**
‚úÖ –í—ã—É—á–µ–Ω–æ: **{stats.learned_cards}**
üéØ –ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é: **{due_cards_count}**
üìà –¢–æ—á–Ω–æ—Å—Ç—å: **{stats.accuracy_rate}%**

‚è±Ô∏è –í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è: **{stats.study_time_minutes} –º–∏–Ω**
üî• –°–µ—Å—Å–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: **{week_sessions}**

üéØ **–ù–µ–¥–µ–ª—å–Ω–∞—è —Ü–µ–ª—å:** {stats.current_week_studied}/{stats.weekly_goal}
"""

    try:
        weekly_progress = stats.weekly_progress
        progress_blocks = int(weekly_progress // 10)
        remaining_blocks = 10 - progress_blocks
        progress_bar = "‚ñà" * progress_blocks + "‚ñë" * remaining_blocks
        progress_text += f"\n[{progress_bar}] {weekly_progress}%"
    except:
        progress_text += f"\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {stats.current_week_studied}/{stats.weekly_goal}"

    if stats.last_study:
        progress_text += f"\n\nüïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑—É—á–µ–Ω–∏–µ: {stats.last_study.strftime('%d.%m.%Y %H:%M')}"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ò–∑—É—á–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="start_study")],
        [InlineKeyboardButton(text="üìö –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today")]
    ])

    await message.answer(progress_text, reply_markup=keyboard, parse_mode="Markdown")
    await log_message(telegram_user, "progress", "–ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")


@dp.message(Command("test"))
async def test_command(message: Message, state: FSMContext):
    telegram_data = create_telegram_data(message.from_user)
    telegram_user = await get_or_create_user(telegram_data)

    @sync_to_async
    def get_random_card():
        cards = Card.objects.filter(user=telegram_user.user)
        return cards.order_by('?').first() if cards.exists() else None

    card = await get_random_card()

    if not card:
        await message.answer("‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return

    await state.update_data(
        current_card_id=card.id,
        test_mode=True,
        start_time=datetime.now().timestamp()
    )
    await state.set_state(StudyStates.waiting_for_answer)

    test_text = f"""
üéØ **–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç**

–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ:
**{card.word}**
"""

    if card.example:
        test_text += f"\n_–ü—Ä–∏–º–µ—Ä: {card.example}_"

    await message.answer(test_text, parse_mode="Markdown")
    await log_message(telegram_user, "test", f"–¢–µ—Å—Ç: {card.word}")


@dp.message(Command("cards"))
async def cards_command(message: Message):
    telegram_data = create_telegram_data(message.from_user)
    telegram_user = await get_or_create_user(telegram_data)

    @sync_to_async
    def get_cards():
        return list(Card.objects.filter(
            user=telegram_user.user
        ).order_by('-created_at')[:15])

    cards = await get_cards()

    if not cards:
        await message.answer("üìö –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫. –°–æ–∑–¥–∞–π –∏—Ö –Ω–∞ —Å–∞–π—Ç–µ!")
        return

    cards_text = "üìö **–¢–≤–æ–∏ –∫–∞—Ä—Ç–æ—á–∫–∏** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 15):\n\n"

    for card in cards:
        if card.is_learned:
            status_emoji = "‚úÖ"
        elif card.times_studied == 0:
            status_emoji = "üÜï"
        else:
            status_emoji = "üìñ"

        cards_text += f"{status_emoji} **{card.word}** ‚Äî {card.translation}\n"

        if card.times_studied > 0:
            cards_text += f"   üìä {card.times_studied} —Ä–∞–∑, {card.accuracy_rate}% —Ç–æ—á–Ω–æ—Å—Ç—å\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –ò–∑—É—á–∞—Ç—å", callback_data="start_study")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="progress")]
    ])

    await message.answer(cards_text, reply_markup=keyboard, parse_mode="Markdown")
    await log_message(telegram_user, "cards", f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫")


@dp.message(Command("help"))
async def help_command(message: Message):
    help_text = """
ü§ñ **LinguaTrack Bot - –°–ø—Ä–∞–≤–∫–∞**

üìö **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/link —Ç–æ–∫–µ–Ω - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/unlink - –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/today - –ö–∞—Ä—Ç–æ—á–∫–∏ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è
/test - –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (—Å–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞)
/progress - –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
/cards - –°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
/help - –ü–æ–º–æ—â—å

üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –°–æ–∑–¥–∞–≤–∞–π –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ LinguaTrack
2. –ü—Ä–∏–≤—è–∂–∏ –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /link
3. –ò–∑—É—á–∞–π —Å–ª–æ–≤–∞ –≥–¥–µ —É–≥–æ–¥–Ω–æ!

–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å–∞–π—Ç–µ, –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.
"""

    await message.answer(help_text, parse_mode="Markdown")


@dp.message(StudyStates.waiting_for_answer)
async def handle_study_answer(message: Message, state: FSMContext):
    data = await state.get_data()

    telegram_data = create_telegram_data(message.from_user)
    telegram_user = await get_or_create_user(telegram_data)

    @sync_to_async
    def process_answer(card_id, user_answer):
        try:
            card = Card.objects.get(id=card_id, user=telegram_user.user)
        except Card.DoesNotExist:
            return None, "–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        correct_answer = card.translation.strip().lower()
        user_answer_clean = user_answer.strip().lower()
        is_correct = user_answer_clean == correct_answer

        if is_correct:
            quality = 5 if user_answer.strip() == card.translation.strip() else 4
            result = 'perfect' if quality == 5 else 'correct'
            emoji = "üéâ" if quality == 5 else "‚úÖ"
            result_text = "–ò–¥–µ–∞–ª—å–Ω–æ!" if quality == 5 else "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        else:
            similarity = len(set(user_answer_clean.split()) & set(correct_answer.split()))
            if similarity > 0:
                quality = 3
                result = 'hard'
                emoji = "‚ö†Ô∏è"
                result_text = "–ë–ª–∏–∑–∫–æ, –Ω–æ –Ω–µ—Ç–æ—á–Ω–æ"
            else:
                quality = 2
                result = 'incorrect'
                emoji = "‚ùå"
                result_text = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"

        StudySession.objects.create(
            card=card,
            user=telegram_user.user,
            result=result,
            quality_score=quality,
            user_answer=user_answer
        )

        card.times_studied += 1
        if is_correct:
            card.times_correct += 1

        if card.times_studied >= 5 and card.accuracy_rate >= 80:
            card.is_learned = True

        card.save()

        try:
            schedule = card.schedule
        except Schedule.DoesNotExist:
            schedule = Schedule.objects.create(
                card=card,
                next_review=timezone.now() + timedelta(days=1)
            )

        stats, _ = UserStats.objects.get_or_create(user=telegram_user.user)
        stats.total_sessions += 1
        if is_correct:
            stats.correct_answers += 1
        stats.last_study = timezone.now()
        stats.save()

        return {
            'card': card,
            'is_correct': is_correct,
            'emoji': emoji,
            'result_text': result_text,
            'quality': quality
        }, None

    result, error = await process_answer(data['current_card_id'], message.text)

    if error:
        await message.answer(f"‚ùå {error}")
        await state.clear()
        return

    card = result['card']
    await state.clear()

    response_text = f"""
{result['emoji']} **{result['result_text']}**

–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: **{card.translation}**
–¢–≤–æ–π –æ—Ç–≤–µ—Ç: _{message.text}_

üéä **–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!**
"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ï—â–µ —Ç–µ—Å—Ç", callback_data="test")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="progress")]
    ])

    await message.answer(response_text, reply_markup=keyboard, parse_mode="Markdown")
    await log_message(telegram_user, "test_completed", f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {card.word}")


@dp.callback_query(F.data == "today")
async def today_callback(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    await today_command(callback.message)
    await callback.answer()


@dp.callback_query(F.data == "progress")
async def progress_callback(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    await progress_command(callback.message)
    await callback.answer()


@dp.callback_query(F.data == "test")
async def test_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await test_command(callback.message, state)
    await callback.answer()


@dp.callback_query(F.data == "start_study")
async def start_study_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)

    telegram_data = create_telegram_data(callback.from_user)
    telegram_user = await get_or_create_user(telegram_data)

    @sync_to_async
    def get_study_cards():
        cards = []
        for card in Card.objects.filter(user=telegram_user.user):
            try:
                if hasattr(card, 'schedule') and card.schedule.next_review <= timezone.now():
                    cards.append(card)
                elif not hasattr(card, 'schedule'):
                    cards.append(card)
            except:
                cards.append(card)

        return cards[:10]

    cards_to_study = await get_study_cards()

    if not cards_to_study:
        await callback.message.answer("üéâ –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!")
        await callback.answer()
        return

    card = cards_to_study[0]

    await state.update_data(
        current_card_id=card.id,
        test_mode=True,
        start_time=datetime.now().timestamp()
    )
    await state.set_state(StudyStates.waiting_for_answer)

    study_text = f"""
üß† **–ò–∑—É—á–µ–Ω–∏–µ**

–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ:
**{card.word}**
"""

    if card.example:
        study_text += f"\n_–ü—Ä–∏–º–µ—Ä: {card.example}_"

    await callback.message.answer(study_text, parse_mode="Markdown")
    await callback.answer()


@dp.message()
async def handle_text_message(message: Message):
    telegram_data = create_telegram_data(message.from_user)
    telegram_user = await get_or_create_user(telegram_data)

    search_text = message.text.lower().strip()

    @sync_to_async
    def find_card(text):
        return Card.objects.filter(
            user=telegram_user.user,
            word__iexact=text
        ).first()

    card = await find_card(search_text)

    if card:
        card_text = f"""
üìö **–ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞:**

**{card.word}** ‚Äî {card.translation}
"""

        if card.example:
            card_text += f"\n_–ü—Ä–∏–º–µ—Ä: {card.example}_"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –¢–µ—Å—Ç", callback_data="test")]
        ])

        await message.answer(card_text, reply_markup=keyboard, parse_mode="Markdown")
        await log_message(telegram_user, "word_search", f"–ù–∞–π–¥–µ–Ω–æ: {card.word}")
    else:
        help_text = """
ü§î –ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è. –ü–æ–ø—Ä–æ–±—É–π:

üìö /today - –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
üéØ /test - –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç  
üìä /progress - —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üîó /link —Ç–æ–∫–µ–Ω - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
‚ùì /help - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
"""

        await message.answer(help_text)


async def main():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

    if not settings.TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
        return

    try:
        me = await bot.get_me()
        logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username} (ID: {me.id})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
        return

    await bot.delete_webhook(drop_pending_updates=True)

    logger.info("–ó–∞–ø—É—Å–∫ polling...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ polling: {e}")


if __name__ == '__main__':
    asyncio.run(main())