from flask import Flask, render_template_string, jsonify
import plotly.graph_objs as go
import plotly.utils
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import random
import logging
import requests
from threading import Thread
import time

# –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π HTML —à–∞–±–ª–æ–Ω
EMBEDDED_HTML = '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/plotly.js/2.26.0/plotly.min.js"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh; padding: 20px;
        }
        .container { max-width: 1600px; margin: 0 auto; }
        .header { text-align: center; margin-bottom: 30px; color: white; }
        .header h1 { font-size: 2.5rem; margin-bottom: 10px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }
        .header p { font-size: 1.1rem; opacity: 0.9; }

        .country-selector {
            background: rgba(255,255,255,0.15);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            text-align: center;
        }

        .country-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            max-width: 1000px;
            margin: 0 auto;
        }

        .country-btn {
            background: rgba(255,255,255,0.2);
            border: 2px solid rgba(255,255,255,0.3);
            border-radius: 12px;
            padding: 15px 20px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .country-btn:hover {
            background: rgba(255,255,255,0.3);
            border-color: rgba(255,255,255,0.5);
            transform: translateY(-2px);
        }

        .country-btn.active {
            background: rgba(255,255,255,0.9);
            color: #333;
            border-color: white;
            box-shadow: 0 5px 20px rgba(0,0,0,0.2);
        }

        .country-flag { font-size: 1.5rem; }

        .status-bar {
            background: rgba(255,255,255,0.1); border-radius: 10px; padding: 15px; margin-bottom: 20px;
            color: white; display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 15px;
        }
        .status-info { display: flex; align-items: center; gap: 10px; }
        .status-indicator { width: 12px; height: 12px; border-radius: 50%; background: #10b981; animation: pulse 2s infinite; }
        .status-indicator.warning { background: #f59e0b; }
        .status-indicator.error { background: #ef4444; }
        @keyframes pulse { 0% { opacity: 1; } 50% { opacity: 0.5; } 100% { opacity: 1; } }

        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .stat-card {
            background: white; border-radius: 15px; padding: 25px; text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1); transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .stat-card:hover { transform: translateY(-5px); box-shadow: 0 15px 40px rgba(0,0,0,0.15); }
        .stat-title { font-size: 0.9rem; color: #666; margin-bottom: 10px; text-transform: uppercase; letter-spacing: 1px; }
        .stat-value { font-size: 2rem; font-weight: bold; color: #333; margin-bottom: 5px; }
        .stat-change { font-size: 0.9rem; font-weight: 600; }
        .stat-change.positive { color: #10b981; }
        .stat-change.negative { color: #ef4444; }
        .stat-unavailable { color: #999; font-style: italic; }

        .charts-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(500px, 1fr)); gap: 25px; margin-bottom: 30px; }
        .chart-container { background: white; border-radius: 15px; padding: 20px; box-shadow: 0 10px 30px rgba(0,0,0,0.1); transition: transform 0.3s ease; }
        .chart-container:hover { transform: translateY(-2px); }
        .chart { width: 100%; height: 400px; }
        .wide-chart { grid-column: 1 / -1; }

        .comparison-section {
            background: rgba(255,255,255,0.1);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            color: white;
        }
        .comparison-section h3 { margin-bottom: 20px; text-align: center; font-size: 1.5rem; }

        .additional-panels { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 25px; margin-bottom: 30px; }
        .info-panel { background: white; border-radius: 15px; padding: 20px; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }
        .info-panel h3 { color: #333; margin-bottom: 15px; font-size: 1.2rem; border-bottom: 2px solid #667eea; padding-bottom: 5px; }
        .info-list { list-style: none; }
        .info-list li { padding: 8px 0; border-bottom: 1px solid #eee; display: flex; justify-content: space-between; align-items: center; }
        .info-list li:last-child { border-bottom: none; }
        .info-label { color: #666; font-size: 0.9rem; }
        .info-value { font-weight: 600; color: #333; }

        .loading { display: flex; justify-content: center; align-items: center; height: 400px; color: #666; font-size: 1.2rem; }
        .spinner { border: 3px solid #f3f3f3; border-top: 3px solid #667eea; border-radius: 50%; width: 30px; height: 30px; animation: spin 1s linear infinite; margin-right: 15px; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }

        .footer { text-align: center; color: white; margin-top: 40px; opacity: 0.8; }
        .refresh-btn {
            position: fixed; bottom: 30px; right: 30px; background: #667eea; color: white; border: none;
            border-radius: 50%; width: 60px; height: 60px; font-size: 1.5rem; cursor: pointer;
            box-shadow: 0 5px 20px rgba(0,0,0,0.2); transition: all 0.3s ease;
        }
        .refresh-btn:hover { background: #5a67d8; transform: scale(1.1); }

        .success-message { background: #d1fae5; color: #065f46; padding: 10px 15px; border-radius: 8px; margin: 10px 0; border-left: 4px solid #10b981; }
        .error-message { background: #fee2e2; color: #dc2626; padding: 10px 15px; border-radius: 8px; margin: 10px 0; border-left: 4px solid #dc2626; }
        .warning-message { background: #fef3c7; color: #92400e; padding: 10px 15px; border-radius: 8px; margin: 10px 0; border-left: 4px solid #f59e0b; }

        @media (max-width: 768px) {
            .charts-grid, .additional-panels { grid-template-columns: 1fr; }
            .header h1 { font-size: 2rem; }
            .stats-grid { grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 15px; }
            .chart { height: 300px; }
            .country-grid { grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üåç –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å</h1>
            <p>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –º–∏—Ä–∞</p>
        </div>

        <div class="country-selector">
            <h3 style="color: white; margin-bottom: 20px;">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</h3>
            <div class="country-grid">
                <button class="country-btn active" onclick="selectCountry('USA')" id="btn-USA">
                    <span class="country-flag">üá∫üá∏</span><span>–°–®–ê</span>
                </button>
                <button class="country-btn" onclick="selectCountry('RUS')" id="btn-RUS">
                    <span class="country-flag">üá∑üá∫</span><span>–†–æ—Å—Å–∏—è</span>
                </button>
                <button class="country-btn" onclick="selectCountry('CHN')" id="btn-CHN">
                    <span class="country-flag">üá®üá≥</span><span>–ö–∏—Ç–∞–π</span>
                </button>
                <button class="country-btn" onclick="selectCountry('DEU')" id="btn-DEU">
                    <span class="country-flag">üá©üá™</span><span>–ì–µ—Ä–º–∞–Ω–∏—è</span>
                </button>
                <button class="country-btn" onclick="selectCountry('GBR')" id="btn-GBR">
                    <span class="country-flag">üá¨üáß</span><span>–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è</span>
                </button>
                <button class="country-btn" onclick="selectCountry('JPN')" id="btn-JPN">
                    <span class="country-flag">üáØüáµ</span><span>–Ø–ø–æ–Ω–∏—è</span>
                </button>
                <button class="country-btn" onclick="selectCountry('FRA')" id="btn-FRA">
                    <span class="country-flag">üá´üá∑</span><span>–§—Ä–∞–Ω—Ü–∏—è</span>
                </button>
                <button class="country-btn" onclick="selectCountry('IND')" id="btn-IND">
                    <span class="country-flag">üáÆüá≥</span><span>–ò–Ω–¥–∏—è</span>
                </button>
            </div>
        </div>

        <div class="status-bar">
            <div class="status-info">
                <div class="status-indicator" id="status-indicator"></div>
                <span id="data-status">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</span>
            </div>
            <div class="status-info">
                <span>–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∞: <span id="current-country">–°–®–ê</span></span>
            </div>
            <div class="status-info">
                <span>–û–±–Ω–æ–≤–ª–µ–Ω–æ: <span id="last-update">-</span></span>
            </div>
        </div>

        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-title">–í–í–ü</div>
                <div class="stat-value" id="gdp-value">-</div>
                <div class="stat-change" id="gdp-change">-</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">–í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è</div>
                <div class="stat-value" id="gdp-per-capita-value">-</div>
                <div class="stat-change" id="gdp-per-capita-change">-</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">–ò–Ω—Ñ–ª—è—Ü–∏—è</div>
                <div class="stat-value" id="inflation-value">-</div>
                <div class="stat-change">% –≥–æ–¥–æ–≤—ã—Ö</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">–ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞</div>
                <div class="stat-value" id="unemployment-value">-</div>
                <div class="stat-change">% –Ω–∞—Å–µ–ª–µ–Ω–∏—è</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">–ù–∞—Å–µ–ª–µ–Ω–∏–µ</div>
                <div class="stat-value" id="population-value">-</div>
                <div class="stat-change">–º–ª–Ω —á–µ–ª–æ–≤–µ–∫</div>
            </div>
        </div>

        <div class="charts-grid">
            <div class="chart-container wide-chart">
                <div id="gdp-chart" class="chart">
                    <div class="loading"><div class="spinner"></div>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –í–í–ü...</div>
                </div>
            </div>

            <div class="chart-container">
                <div id="economic-indicators-chart" class="chart">
                    <div class="loading"><div class="spinner"></div>–ó–∞–≥—Ä—É–∑–∫–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...</div>
                </div>
            </div>

            <div class="chart-container">
                <div id="gdp-per-capita-chart" class="chart">
                    <div class="loading"><div class="spinner"></div>–ó–∞–≥—Ä—É–∑–∫–∞ –í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è...</div>
                </div>
            </div>
        </div>

        <div class="comparison-section">
            <h3>üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω</h3>
            <div class="chart-container">
                <div id="countries-comparison-chart" class="chart">
                    <div class="loading"><div class="spinner"></div>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω...</div>
                </div>
            </div>
        </div>

        <div class="additional-panels">
            <div class="info-panel">
                <h3>üèõÔ∏è –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</h3>
                <ul class="info-list" id="economic-indicators">
                    <li><span class="info-label">–ò–Ω—Ñ–ª—è—Ü–∏—è</span><span class="info-value" id="inflation-info">-</span></li>
                    <li><span class="info-label">–ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞</span><span class="info-value" id="unemployment-info">-</span></li>
                    <li><span class="info-label">–ù–∞—Å–µ–ª–µ–Ω–∏–µ</span><span class="info-value" id="population-info">-</span></li>
                    <li><span class="info-label">–°—Ç–∞—Ç—É—Å API</span><span class="info-value" id="api-status">-</span></li>
                </ul>
            </div>

            <div class="info-panel">
                <h3>üåç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–µ</h3>
                <ul class="info-list" id="country-info">
                    <li><span class="info-label">–°—Ç–æ–ª–∏—Ü–∞</span><span class="info-value" id="country-capital">-</span></li>
                    <li><span class="info-label">–†–µ–≥–∏–æ–Ω</span><span class="info-value" id="country-region">-</span></li>
                    <li><span class="info-label">–ì—Ä—É–ø–ø–∞ –¥–æ—Ö–æ–¥–æ–≤</span><span class="info-value" id="country-income">-</span></li>
                    <li><span class="info-label">–í–∞–ª—é—Ç–∞</span><span class="info-value" id="country-currency">-</span></li>
                </ul>
            </div>

            <div class="info-panel">
                <h3>üìà –†–µ–π—Ç–∏–Ω–≥–∏</h3>
                <ul class="info-list" id="country-rankings">
                    <li><span class="info-label">–ú–µ—Å—Ç–æ –ø–æ –í–í–ü</span><span class="info-value" id="gdp-ranking">-</span></li>
                    <li><span class="info-label">–ú–µ—Å—Ç–æ –ø–æ –í–í–ü/—á–µ–ª</span><span class="info-value" id="gdp-per-capita-ranking">-</span></li>
                    <li><span class="info-label">–î–æ–ª—è –≤ –º–∏—Ä–æ–≤–æ–º –í–í–ü</span><span class="info-value" id="world-gdp-share">-</span></li>
                    <li><span class="info-label">–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö</span><span class="info-value" id="data-source-info">-</span></li>
                </ul>
            </div>
        </div>

        <div class="footer">
            <p>¬© 2025 –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ | –î–∞–Ω–Ω—ã–µ: World Bank + —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏</p>
        </div>
    </div>

    <button class="refresh-btn" onclick="refreshCurrentCountry()" title="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω—ã">üîÑ</button>
    <div id="notifications" style="position: fixed; top: 20px; right: 20px; z-index: 1000;"></div>

    <script>
        let currentCountry = 'USA';

        const plotConfig = {
            displayModeBar: true, 
            modeBarButtonsToRemove: ['pan2d', 'lasso2d', 'select2d'],
            responsive: true, 
            displaylogo: false
        };

        const countryNames = {
            'USA': '–°–®–ê', 'RUS': '–†–æ—Å—Å–∏—è', 'CHN': '–ö–∏—Ç–∞–π', 'DEU': '–ì–µ—Ä–º–∞–Ω–∏—è',
            'GBR': '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', 'JPN': '–Ø–ø–æ–Ω–∏—è', 'FRA': '–§—Ä–∞–Ω—Ü–∏—è', 'IND': '–ò–Ω–¥–∏—è'
        };

        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            let className = 'success-message';
            if (type === 'error') className = 'error-message';
            if (type === 'warning') className = 'warning-message';

            notification.className = className;
            notification.textContent = message;
            const container = document.getElementById('notifications');
            container.appendChild(notification);
            setTimeout(() => {
                if (container.contains(notification)) {
                    container.removeChild(notification);
                }
            }, 5000);
        }

        function updateStatusIndicator(status) {
            const indicator = document.getElementById('status-indicator');
            indicator.className = 'status-indicator';
            if (status === 'warning') indicator.classList.add('warning');
            if (status === 'error') indicator.classList.add('error');
        }

        function selectCountry(countryCode) {
            document.querySelectorAll('.country-btn').forEach(btn => btn.classList.remove('active'));
            document.getElementById('btn-' + countryCode).classList.add('active');

            currentCountry = countryCode;
            document.getElementById('current-country').textContent = countryNames[countryCode];

            showNotification('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ ' + countryNames[countryCode] + '...', 'info');
            loadCountryData(countryCode);
        }

        async function loadCountryData(countryCode) {
            try {
                document.getElementById('data-status').textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ' + countryNames[countryCode] + '...';
                updateStatusIndicator('warning');

                await Promise.all([
                    loadCountrySummaryStats(countryCode),
                    loadCountryCharts(countryCode),
                    loadCountryInfo(countryCode),
                    loadCountriesComparison()
                ]);

                document.getElementById('data-status').textContent = '–î–∞–Ω–Ω—ã–µ –¥–ª—è ' + countryNames[countryCode] + ' –∑–∞–≥—Ä—É–∂–µ–Ω—ã';
                document.getElementById('last-update').textContent = new Date().toLocaleString('ru-RU');
                updateStatusIndicator('success');

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω—ã:', error);
                document.getElementById('data-status').textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ' + countryNames[countryCode];
                updateStatusIndicator('error');
                showNotification('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API', 'warning');
            }
        }

        async function loadCountrySummaryStats(countryCode) {
            try {
                const response = await fetch('/api/country-stats/' + countryCode);
                const data = await response.json();

                // –í–í–ü
                if (data.gdp && data.gdp.current !== '–ù/–î') {
                    document.getElementById('gdp-value').textContent = data.gdp.current;
                    const changeEl = document.getElementById('gdp-change');
                    changeEl.textContent = data.gdp.change || '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è';
                    changeEl.className = 'stat-change ' + (data.gdp.change && parseFloat(data.gdp.change) >= 0 ? 'positive' : 'negative');
                } else {
                    document.getElementById('gdp-value').textContent = '–ù/–î';
                    document.getElementById('gdp-change').textContent = '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';
                    document.getElementById('gdp-change').className = 'stat-change stat-unavailable';
                }

                // –í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è
                if (data.gdp_per_capita && data.gdp_per_capita.current !== '–ù/–î') {
                    document.getElementById('gdp-per-capita-value').textContent = data.gdp_per_capita.current;
                    const changeEl = document.getElementById('gdp-per-capita-change');
                    changeEl.textContent = data.gdp_per_capita.change || '–û—Ü–µ–Ω–∫–∞';
                    changeEl.className = 'stat-change positive';
                } else {
                    document.getElementById('gdp-per-capita-value').textContent = '–ù/–î';
                    document.getElementById('gdp-per-capita-change').textContent = '–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';
                    document.getElementById('gdp-per-capita-change').className = 'stat-change stat-unavailable';
                }

                // –ò–Ω—Ñ–ª—è—Ü–∏—è
                if (data.inflation && data.inflation !== '–ù/–î') {
                    document.getElementById('inflation-value').textContent = data.inflation + '%';
                    document.getElementById('inflation-info').textContent = data.inflation + '%';
                } else {
                    document.getElementById('inflation-value').textContent = '–ù/–î';
                    document.getElementById('inflation-info').textContent = '–ù/–î';
                }

                // –ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞
                if (data.unemployment && data.unemployment !== '–ù/–î') {
                    document.getElementById('unemployment-value').textContent = data.unemployment + '%';
                    document.getElementById('unemployment-info').textContent = data.unemployment + '%';
                } else {
                    document.getElementById('unemployment-value').textContent = '–ù/–î';
                    document.getElementById('unemployment-info').textContent = '–ù/–î';
                }

                // –ù–∞—Å–µ–ª–µ–Ω–∏–µ
                if (data.population && data.population !== '–ù/–î –º–ª–Ω') {
                    const popValue = data.population.replace(' –º–ª–Ω', '');
                    document.getElementById('population-value').textContent = popValue;
                    document.getElementById('population-info').textContent = data.population;
                } else {
                    document.getElementById('population-value').textContent = '–ù/–î';
                    document.getElementById('population-info').textContent = '–ù/–î';
                }

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—Ä–∞–Ω—ã:', error);
                showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'warning');
            }
        }

        async function loadCountryCharts(countryCode) {
            await Promise.all([
                loadChart('/api/country-gdp/' + countryCode, 'gdp-chart', '–¥–∞–Ω–Ω—ã—Ö –í–í–ü'),
                loadChart('/api/country-indicators/' + countryCode, 'economic-indicators-chart', '—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤'),
                loadChart('/api/country-gdp-per-capita/' + countryCode, 'gdp-per-capita-chart', '–í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è')
            ]);
        }

        async function loadCountryInfo(countryCode) {
            try {
                const response = await fetch('/api/country-info/' + countryCode);
                const data = await response.json();

                if (data.country_info) {
                    const info = data.country_info;
                    document.getElementById('country-capital').textContent = info.capital || '-';
                    document.getElementById('country-region').textContent = info.region || '-';
                    document.getElementById('country-income').textContent = info.income_level || '-';
                    document.getElementById('country-currency').textContent = info.currency || '-';
                }

                if (data.rankings) {
                    const rankings = data.rankings;
                    document.getElementById('gdp-ranking').textContent = rankings.gdp_rank || '-';
                    document.getElementById('gdp-per-capita-ranking').textContent = rankings.gdp_per_capita_rank || '-';
                    document.getElementById('world-gdp-share').textContent = rankings.world_gdp_share || '-';
                }

                if (data.data_sources) {
                    document.getElementById('api-status').textContent = data.data_sources.api_status || '-';
                    document.getElementById('data-source-info').textContent = data.data_sources.gdp || '-';
                }

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–µ:', error);
            }
        }

        async function loadCountriesComparison() {
            try {
                await loadChart('/api/countries-comparison', 'countries-comparison-chart', '—Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω:', error);
            }
        }

        async function loadChart(endpoint, elementId, errorMessage) {
            try {
                const response = await fetch(endpoint);
                if (!response.ok) {
                    throw new Error('HTTP ' + response.status);
                }
                const plotData = await response.json();
                Plotly.newPlot(elementId, plotData.data, plotData.layout, plotConfig);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ' + errorMessage + ':', error);
                document.getElementById(elementId).innerHTML = '<div class="loading">‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ' + errorMessage + '<br><small>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</small></div>';
            }
        }

        function refreshCurrentCountry() {
            const refreshBtn = document.querySelector('.refresh-btn');
            refreshBtn.style.transform = 'rotate(360deg)';
            setTimeout(() => refreshBtn.style.transform = 'rotate(0deg)', 500);

            showNotification('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ' + countryNames[currentCountry] + '...', 'info');
            loadCountryData(currentCountry);
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç
        setInterval(() => {
            loadCountryData(currentCountry);
        }, 1200000);

        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        document.addEventListener('DOMContentLoaded', () => {
            showNotification('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏...', 'info');
            loadCountryData('USA');
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', function() {
            setTimeout(() => {
                ['gdp-chart', 'economic-indicators-chart', 'gdp-per-capita-chart', 'countries-comparison-chart'].forEach(chartId => {
                    try { Plotly.Plots.resize(chartId); } catch (error) { }
                });
            }, 100);
        });
    </script>
</body>
</html>
'''

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
countries_cache = {}


class SimpleCountryDataProvider:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∞–¥–µ–∂–Ω—ã–º–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""

    def __init__(self):
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∞—Ö
        self.countries_info = {
            'USA': {
                'name': '–°–®–ê', 'capital': '–í–∞—à–∏–Ω–≥—Ç–æ–Ω', 'region': '–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞',
                'income_level': '–í—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥', 'currency': '–î–æ–ª–ª–∞—Ä –°–®–ê (USD)'
            },
            'RUS': {
                'name': '–†–æ—Å—Å–∏—è', 'capital': '–ú–æ—Å–∫–≤–∞', 'region': '–ï–≤—Ä–æ–ø–∞ –∏ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–∑–∏—è',
                'income_level': '–î–æ—Ö–æ–¥ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ', 'currency': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å (RUB)'
            },
            'CHN': {
                'name': '–ö–∏—Ç–∞–π', 'capital': '–ü–µ–∫–∏–Ω', 'region': '–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è –∏ –¢–∏—Ö–∏–π –æ–∫–µ–∞–Ω',
                'income_level': '–î–æ—Ö–æ–¥ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ', 'currency': '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å (CNY)'
            },
            'DEU': {
                'name': '–ì–µ—Ä–º–∞–Ω–∏—è', 'capital': '–ë–µ—Ä–ª–∏–Ω', 'region': '–ï–≤—Ä–æ–ø–∞ –∏ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–∑–∏—è',
                'income_level': '–í—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥', 'currency': '–ï–≤—Ä–æ (EUR)'
            },
            'GBR': {
                'name': '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', 'capital': '–õ–æ–Ω–¥–æ–Ω', 'region': '–ï–≤—Ä–æ–ø–∞ –∏ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–∑–∏—è',
                'income_level': '–í—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥', 'currency': '–§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤ (GBP)'
            },
            'JPN': {
                'name': '–Ø–ø–æ–Ω–∏—è', 'capital': '–¢–æ–∫–∏–æ', 'region': '–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è –∏ –¢–∏—Ö–∏–π –æ–∫–µ–∞–Ω',
                'income_level': '–í—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥', 'currency': '–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞ (JPY)'
            },
            'FRA': {
                'name': '–§—Ä–∞–Ω—Ü–∏—è', 'capital': '–ü–∞—Ä–∏–∂', 'region': '–ï–≤—Ä–æ–ø–∞ –∏ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–∑–∏—è',
                'income_level': '–í—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥', 'currency': '–ï–≤—Ä–æ (EUR)'
            },
            'IND': {
                'name': '–ò–Ω–¥–∏—è', 'capital': '–ù—å—é-–î–µ–ª–∏', 'region': '–Æ–∂–Ω–∞—è –ê–∑–∏—è',
                'income_level': '–î–æ—Ö–æ–¥ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ', 'currency': '–ò–Ω–¥–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è (INR)'
            }
        }

        # –ù–∞–¥–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ 2024
        self.country_data = {
            'USA': {
                'gdp_data': [
                    {'year': 2020, 'gdp_trillion': 20.95},
                    {'year': 2021, 'gdp_trillion': 23.32},
                    {'year': 2022, 'gdp_trillion': 25.46},
                    {'year': 2023, 'gdp_trillion': 26.85},
                    {'year': 2024, 'gdp_trillion': 27.36}
                ],
                'gdp_per_capita': 82400,
                'inflation': 3.2,
                'unemployment': 3.7,
                'population': 331.9,
                'gdp_rank': 1,
                'gdp_per_capita_rank': 8,
                'world_gdp_share': '24.7%'
            },
            'RUS': {
                'gdp_data': [
                    {'year': 2020, 'gdp_trillion': 1.48},
                    {'year': 2021, 'gdp_trillion': 1.78},
                    {'year': 2022, 'gdp_trillion': 2.24},
                    {'year': 2023, 'gdp_trillion': 2.06},
                    {'year': 2024, 'gdp_trillion': 2.11}
                ],
                'gdp_per_capita': 14800,
                'inflation': 5.9,
                'unemployment': 3.2,
                'population': 144.4,
                'gdp_rank': 11,
                'gdp_per_capita_rank': 62,
                'world_gdp_share': '2.0%'
            },
            'CHN': {
                'gdp_data': [
                    {'year': 2020, 'gdp_trillion': 14.72},
                    {'year': 2021, 'gdp_trillion': 17.73},
                    {'year': 2022, 'gdp_trillion': 17.95},
                    {'year': 2023, 'gdp_trillion': 17.89},
                    {'year': 2024, 'gdp_trillion': 18.53}
                ],
                'gdp_per_capita': 13100,
                'inflation': 0.2,
                'unemployment': 5.2,
                'population': 1412.0,
                'gdp_rank': 2,
                'gdp_per_capita_rank': 72,
                'world_gdp_share': '17.8%'
            },
            'DEU': {
                'gdp_data': [
                    {'year': 2020, 'gdp_trillion': 3.85},
                    {'year': 2021, 'gdp_trillion': 4.26},
                    {'year': 2022, 'gdp_trillion': 4.26},
                    {'year': 2023, 'gdp_trillion': 4.12},
                    {'year': 2024, 'gdp_trillion': 4.18}
                ],
                'gdp_per_capita': 50200,
                'inflation': 2.3,
                'unemployment': 3.1,
                'population': 83.2,
                'gdp_rank': 4,
                'gdp_per_capita_rank': 18,
                'world_gdp_share': '4.0%'
            },
            'GBR': {
                'gdp_data': [
                    {'year': 2020, 'gdp_trillion': 2.76},
                    {'year': 2021, 'gdp_trillion': 3.13},
                    {'year': 2022, 'gdp_trillion': 3.13},
                    {'year': 2023, 'gdp_trillion': 3.13},
                    {'year': 2024, 'gdp_trillion': 3.18}
                ],
                'gdp_per_capita': 47100,
                'inflation': 2.0,
                'unemployment': 4.2,
                'population': 67.5,
                'gdp_rank': 6,
                'gdp_per_capita_rank': 22,
                'world_gdp_share': '3.1%'
            },
            'JPN': {
                'gdp_data': [
                    {'year': 2020, 'gdp_trillion': 4.89},
                    {'year': 2021, 'gdp_trillion': 4.94},
                    {'year': 2022, 'gdp_trillion': 4.94},
                    {'year': 2023, 'gdp_trillion': 4.21},
                    {'year': 2024, 'gdp_trillion': 4.11}
                ],
                'gdp_per_capita': 32700,
                'inflation': 3.1,
                'unemployment': 2.4,
                'population': 125.8,
                'gdp_rank': 3,
                'gdp_per_capita_rank': 26,
                'world_gdp_share': '4.3%'
            },
            'FRA': {
                'gdp_data': [
                    {'year': 2020, 'gdp_trillion': 2.60},
                    {'year': 2021, 'gdp_trillion': 2.94},
                    {'year': 2022, 'gdp_trillion': 2.78},
                    {'year': 2023, 'gdp_trillion': 2.78},
                    {'year': 2024, 'gdp_trillion': 2.81}
                ],
                'gdp_per_capita': 41500,
                'inflation': 2.9,
                'unemployment': 7.3,
                'population': 67.8,
                'gdp_rank': 7,
                'gdp_per_capita_rank': 20,
                'world_gdp_share': '2.9%'
            },
            'IND': {
                'gdp_data': [
                    {'year': 2020, 'gdp_trillion': 3.18},
                    {'year': 2021, 'gdp_trillion': 3.39},
                    {'year': 2022, 'gdp_trillion': 3.74},
                    {'year': 2023, 'gdp_trillion': 3.74},
                    {'year': 2024, 'gdp_trillion': 3.94}
                ],
                'gdp_per_capita': 2800,
                'inflation': 5.1,
                'unemployment': 3.4,
                'population': 1380.0,
                'gdp_rank': 5,
                'gdp_per_capita_rank': 142,
                'world_gdp_share': '3.7%'
            }
        }

    def get_country_data(self, country_code):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞–Ω—ã"""
        logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {self.countries_info[country_code]['name']}...")

        country_data = self.country_data.get(country_code, self.country_data['USA'])

        # –í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è
        gdp_per_capita_data = []
        for record in country_data['gdp_data']:
            gdp_per_capita_data.append({
                'year': record['year'],
                'gdp_per_capita': round((record['gdp_trillion'] * 1e12) / (country_data['population'] * 1e6), 0)
            })

        result = {
            'gdp_data': country_data['gdp_data'],
            'gdp_per_capita': gdp_per_capita_data,
            'inflation': country_data['inflation'],
            'unemployment': country_data['unemployment'],
            'population': country_data['population'],
            'rankings': {
                'gdp_rank': country_data['gdp_rank'],
                'gdp_per_capita_rank': country_data['gdp_per_capita_rank'],
                'world_gdp_share': country_data['world_gdp_share']
            },
            'data_sources': {
                'gdp': '–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ 2024',
                'inflation': '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ –±–∞–Ω–∫–∏',
                'unemployment': '–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                'api_status': '–†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
            },
            'last_update': datetime.now()
        }

        countries_cache[country_code] = result
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è {self.countries_info[country_code]['name']} –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return result

    def get_countries_comparison(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω"""
        comparison_data = {}

        for country_code in self.countries_info.keys():
            if country_code not in countries_cache:
                self.get_country_data(country_code)

            country_data = countries_cache.get(country_code, {})
            if country_data.get('gdp_data'):
                latest_gdp = country_data['gdp_data'][-1]['gdp_trillion']
                comparison_data[self.countries_info[country_code]['name']] = latest_gdp

        return comparison_data


# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
data_provider = SimpleCountryDataProvider()


# Flask Routes
@app.route('/')
def dashboard_page():
    return render_template_string(EMBEDDED_HTML)


@app.route('/api/country-stats/<country_code>')
def country_stats(country_code):
    try:
        if country_code not in countries_cache:
            data_provider.get_country_data(country_code)

        country_data = countries_cache.get(country_code, {})
        result = {}

        # –í–í–ü
        if country_data.get('gdp_data') and len(country_data['gdp_data']) >= 2:
            latest = country_data['gdp_data'][-1]
            prev = country_data['gdp_data'][-2]
            change = ((latest['gdp_trillion'] - prev['gdp_trillion']) / prev['gdp_trillion'] * 100)

            result['gdp'] = {
                'current': str(latest['gdp_trillion']) + ' —Ç—Ä–ª–Ω $',
                'change': f"{change:+.1f}% –∑–∞ –≥–æ–¥"
            }
        else:
            result['gdp'] = {'current': '–ù/–î', 'change': '–ù/–î'}

        # –í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è
        if country_data.get('gdp_per_capita'):
            latest_per_capita = country_data['gdp_per_capita'][-1]['gdp_per_capita']
            result['gdp_per_capita'] = {
                'current': f"{latest_per_capita:,.0f} $",
                'change': "–û—Ü–µ–Ω–∫–∞ 2024"
            }
        else:
            result['gdp_per_capita'] = {'current': '–ù/–î', 'change': '–ù/–î'}

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        result['inflation'] = country_data.get('inflation') if country_data.get('inflation') is not None else '–ù/–î'
        result['unemployment'] = country_data.get('unemployment') if country_data.get(
            'unemployment') is not None else '–ù/–î'
        result['population'] = str(country_data.get('population', 0)) + ' –º–ª–Ω' if country_data.get(
            'population') else '–ù/–î –º–ª–Ω'

        return jsonify(result)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ country_stats –¥–ª—è {country_code}: {e}")
        return jsonify({'error': str(e)}), 500


@app.route('/api/country-gdp/<country_code>')
def country_gdp(country_code):
    try:
        if country_code not in countries_cache:
            data_provider.get_country_data(country_code)

        country_data = countries_cache.get(country_code, {})
        gdp_data = country_data.get('gdp_data', [])

        if not gdp_data:
            return jsonify({'error': 'No GDP data available'}), 500

        fig = go.Figure()

        years = [str(record['year']) for record in gdp_data]
        values = [record['gdp_trillion'] for record in gdp_data]

        country_name = data_provider.countries_info[country_code]['name']

        fig.add_trace(go.Scatter(
            x=years,
            y=values,
            mode='lines+markers',
            name='–í–í–ü ' + country_name,
            line=dict(color='#1f77b4', width=3),
            marker=dict(size=8),
            hovertemplate='<b>%{x}</b><br>–í–í–ü ' + country_name + ': $%{y:.2f} —Ç—Ä–ª–Ω<extra></extra>'
        ))

        fig.update_layout(
            title='–î–∏–Ω–∞–º–∏–∫–∞ –í–í–ü: ' + country_name,
            xaxis_title='–ì–æ–¥',
            yaxis_title='–í–í–ü (—Ç—Ä–ª–Ω –¥–æ–ª–ª–∞—Ä–æ–≤)',
            hovermode='x unified',
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(family="Arial, sans-serif", size=12),
            margin=dict(l=50, r=50, t=50, b=50),
            xaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(128,128,128,0.2)'),
            yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(128,128,128,0.2)')
        )

        return json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)
    except Exception as e:
        return jsonify({'error': str(e)}), 500


@app.route('/api/country-indicators/<country_code>')
def country_indicators(country_code):
    try:
        if country_code not in countries_cache:
            data_provider.get_country_data(country_code)

        country_data = countries_cache.get(country_code, {})
        country_name = data_provider.countries_info[country_code]['name']

        fig = go.Figure()

        indicators = []
        values = []
        colors = []

        if country_data.get('inflation') is not None:
            indicators.append('–ò–Ω—Ñ–ª—è—Ü–∏—è')
            values.append(country_data['inflation'])
            colors.append('#ff7f0e')

        if country_data.get('unemployment') is not None:
            indicators.append('–ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞')
            values.append(country_data['unemployment'])
            colors.append('#d62728')

        if not indicators:
            indicators = ['–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã']
            values = [0]
            colors = ['#cccccc']

        fig.add_trace(go.Bar(
            x=indicators,
            y=values,
            name='–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ ' + country_name,
            marker_color=colors,
            text=[str(v) + '%' if v > 0 else '–ù/–î' for v in values],
            textposition='auto',
            hovertemplate='<b>%{x}</b><br>–ó–Ω–∞—á–µ–Ω–∏–µ: %{y:.1f}%<extra></extra>'
        ))

        fig.update_layout(
            title='–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: ' + country_name,
            xaxis_title='–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä',
            yaxis_title='–ó–Ω–∞—á–µ–Ω–∏–µ (%)',
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(family="Arial, sans-serif", size=12),
            margin=dict(l=50, r=50, t=50, b=50)
        )

        return json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)
    except Exception as e:
        return jsonify({'error': str(e)}), 500


@app.route('/api/country-gdp-per-capita/<country_code>')
def country_gdp_per_capita(country_code):
    try:
        if country_code not in countries_cache:
            data_provider.get_country_data(country_code)

        country_data = countries_cache.get(country_code, {})
        per_capita_data = country_data.get('gdp_per_capita', [])

        country_name = data_provider.countries_info[country_code]['name']

        fig = go.Figure()

        if per_capita_data:
            years = [str(record['year']) for record in per_capita_data]
            values = [record['gdp_per_capita'] for record in per_capita_data]

            fig.add_trace(go.Scatter(
                x=years,
                y=values,
                mode='lines+markers',
                name='–í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è ' + country_name,
                line=dict(color='#2ca02c', width=3),
                marker=dict(size=8),
                hovertemplate='<b>%{x}</b><br>–í–í–ü/—á–µ–ª ' + country_name + ': $%{y:,.0f}<extra></extra>'
            ))

        fig.update_layout(
            title='–í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è: ' + country_name,
            xaxis_title='–ì–æ–¥',
            yaxis_title='–í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è (USD)',
            hovermode='x unified',
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(family="Arial, sans-serif", size=12),
            margin=dict(l=50, r=50, t=50, b=50),
            xaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(128,128,128,0.2)'),
            yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(128,128,128,0.2)')
        )

        return json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)
    except Exception as e:
        return jsonify({'error': str(e)}), 500


@app.route('/api/country-info/<country_code>')
def country_info(country_code):
    try:
        country_data = countries_cache.get(country_code, {})
        country_basic_info = data_provider.countries_info.get(country_code, {})

        rankings = country_data.get('rankings', {})
        sources = country_data.get('data_sources', {})

        result = {
            'country_info': country_basic_info,
            'rankings': rankings,
            'data_sources': sources
        }

        return jsonify(result)

    except Exception as e:
        return jsonify({'error': str(e)}), 500


@app.route('/api/countries-comparison')
def countries_comparison():
    try:
        comparison_data = data_provider.get_countries_comparison()

        fig = go.Figure()

        countries = list(comparison_data.keys())
        gdp_values = list(comparison_data.values())

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –í–í–ü
        sorted_data = sorted(zip(countries, gdp_values), key=lambda x: x[1], reverse=True)
        countries, gdp_values = zip(*sorted_data)

        colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f']

        fig.add_trace(go.Bar(
            x=countries,
            y=gdp_values,
            name='–í–í–ü –ø–æ —Å—Ç—Ä–∞–Ω–∞–º',
            marker_color=colors[:len(countries)],
            text=[str(v) + ' —Ç—Ä–ª–Ω $' for v in gdp_values],
            textposition='auto',
            hovertemplate='<b>%{x}</b><br>–í–í–ü: $%{y:.1f} —Ç—Ä–ª–Ω<extra></extra>'
        ))

        fig.update_layout(
            title='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –í–í–ü —Å—Ç—Ä–∞–Ω –º–∏—Ä–∞',
            xaxis_title='–°—Ç—Ä–∞–Ω–∞',
            yaxis_title='–í–í–ü (—Ç—Ä–ª–Ω –¥–æ–ª–ª–∞—Ä–æ–≤)',
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(family="Arial, sans-serif", size=12),
            margin=dict(l=50, r=50, t=50, b=50),
            xaxis=dict(tickangle=45)
        )

        return json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)
    except Exception as e:
        return jsonify({'error': str(e)}), 500


if __name__ == '__main__':
    print("üåç –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏...")
    print("üìä –ü–∞–Ω–µ–ª—å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5004")
    print("üá∫üá∏ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã: –°–®–ê, –†–æ—Å—Å–∏—è, –ö–∏—Ç–∞–π, –ì–µ—Ä–º–∞–Ω–∏—è, –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è, –Ø–ø–æ–Ω–∏—è, –§—Ä–∞–Ω—Ü–∏—è, –ò–Ω–¥–∏—è")
    print("üìä –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞–¥–µ–∂–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ 2024 –≥–æ–¥–∞")
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å f-—Å—Ç—Ä–æ–∫–∞–º–∏")
    print("üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

    app.run(debug=True, host='127.0.0.1', port=5004)