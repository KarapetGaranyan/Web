import os
import re
import hashlib
from docx import Document


def replace_placeholders(text, data):
    """–ó–∞–º–µ–Ω—è–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–µ"""
    if not text:
        return text

    for key, value in data.items():
        placeholder = '{{ ' + key + ' }}'
        if placeholder in text:
            text = text.replace(placeholder, str(value or ''))
    return text


def normalize_url(url):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç URL, –¥–æ–±–∞–≤–ª—è—è –ø—Ä–æ—Ç–æ–∫–æ–ª –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"""
    if not url:
        return url

    url = url.strip()
    if url and not url.startswith(('http://', 'https://')):
        return f'https://{url}'
    return url


def clean_filename(filename):
    """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å"""
    # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    name_without_ext = os.path.splitext(filename)[0] if '.' in filename else filename
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    clean_name = re.sub(r'[<>:"/\\|?*]', '_', name_without_ext)
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    clean_name = re.sub(r'[_\s]+', '_', clean_name).strip('_')
    return clean_name if clean_name else 'document'


def simple_replace_in_paragraph(paragraph, data):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–º–µ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    if not paragraph or not hasattr(paragraph, 'runs'):
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ runs
    if not paragraph.runs:
        return False

    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
    full_text = paragraph.text
    if not full_text or '{{' not in full_text:
        return False

    # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    original_text = full_text
    for key, value in data.items():
        placeholder = '{{ ' + key + ' }}'
        if placeholder in full_text:
            full_text = full_text.replace(placeholder, str(value or ''))

    # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ
    if full_text == original_text:
        return False

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–º–µ–Ω–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ runs
    try:
        if len(paragraph.runs) > 0:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ run'–∞
            first_run = paragraph.runs[0]
            first_run.text = full_text

            # –û—á–∏—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ runs (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã)
            for i in range(len(paragraph.runs) - 1, 0, -1):
                try:
                    paragraph.runs[i].text = ""
                except IndexError:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                    continue

            return True
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç runs, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            run = paragraph.add_run(full_text)
            return True

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ: {e}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π run —Å —Ç–µ–∫—Å—Ç–æ–º
        try:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ runs
            for run in paragraph.runs:
                run.text = ""
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π run —Å –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            paragraph.add_run(full_text)
            return True
        except Exception as e2:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ run: {e2}")
            return False


def process_docx_template_safe(template_path, output_path, data):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ DOCX —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–±–ª–∏—Ü"""
    try:
        print(f"üìÑ –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞: {template_path}")
        doc = Document(template_path)

        replacements_made = 0

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        print("üîç –ü–æ–∏—Å–∫ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–∫—Å—Ç–µ...")
        for i, paragraph in enumerate(doc.paragraphs):
            try:
                if simple_replace_in_paragraph(paragraph, data):
                    replacements_made += 1
                    print(f"  ‚úÖ –ó–∞–º–µ–Ω–∞ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ {i}")
            except Exception as e:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ {i}: {e}")
                continue

        # ‚ùó –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –¢–ê–ë–õ–ò–¶
        print("üîç –ü–æ–∏—Å–∫ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö...")
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(doc.tables)}")

        for table_idx, table in enumerate(doc.tables):
            print(f"   üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã {table_idx + 1}")
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
                rows_count = len(table.rows)
                print(f"      –°—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {rows_count}")

                for row_idx, row in enumerate(table.rows):
                    try:
                        cells_count = len(row.cells)
                        print(f"      –°—Ç—Ä–æ–∫–∞ {row_idx + 1}: —è—á–µ–µ–∫ {cells_count}")

                        for cell_idx, cell in enumerate(row.cells):
                            try:
                                # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —è—á–µ–π–∫–∏
                                cell_text = cell.text

                                if '{{' in cell_text:
                                    print(f"        –Ø—á–µ–π–∫–∞ [{row_idx + 1}][{cell_idx + 1}] —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã:")
                                    print(f"          –¢–µ–∫—Å—Ç: '{cell_text[:100]}...'")

                                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –≤ —è—á–µ–π–∫–µ
                                    cell_replacements = 0
                                    for para_idx, paragraph in enumerate(cell.paragraphs):
                                        if '{{' in paragraph.text:
                                            print(f"          –ü–∞—Ä–∞–≥—Ä–∞—Ñ {para_idx}: '{paragraph.text}'")

                                            if simple_replace_in_paragraph(paragraph, data):
                                                cell_replacements += 1
                                                replacements_made += 1
                                                print(f"          ‚úÖ –ó–∞–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: '{paragraph.text}'")

                                    if cell_replacements == 0:
                                        print(f"          ‚ö†Ô∏è –ó–∞–º–µ–Ω—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤ —è—á–µ–π–∫–µ")

                                        # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —è—á–µ–µ–∫
                                        if alternative_cell_replacement(cell, data):
                                            replacements_made += 1
                                            print(f"          ‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∑–∞–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

                            except Exception as e:
                                print(f"        ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —è—á–µ–π–∫–µ [{row_idx + 1}][{cell_idx + 1}]: {e}")
                                continue

                    except Exception as e:
                        print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row_idx + 1}: {e}")
                        continue

            except Exception as e:
                print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ {table_idx + 1}: {e}")
                continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Ñ—É—Ç–µ—Ä–æ–≤
        print("üîç –ü–æ–∏—Å–∫ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∏ —Ñ—É—Ç–µ—Ä–∞—Ö...")
        for section_idx, section in enumerate(doc.sections):
            try:
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                if hasattr(section, 'header') and section.header:
                    for para_idx, paragraph in enumerate(section.header.paragraphs):
                        try:
                            if simple_replace_in_paragraph(paragraph, data):
                                replacements_made += 1
                                print(f"  ‚úÖ –ó–∞–º–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Å–µ–∫—Ü–∏–∏ {section_idx}")
                        except Exception as e:
                            print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Å–µ–∫—Ü–∏–∏ {section_idx}[{para_idx}]: {e}")
                            continue

                # –§—É—Ç–µ—Ä—ã
                if hasattr(section, 'footer') and section.footer:
                    for para_idx, paragraph in enumerate(section.footer.paragraphs):
                        try:
                            if simple_replace_in_paragraph(paragraph, data):
                                replacements_made += 1
                                print(f"  ‚úÖ –ó–∞–º–µ–Ω–∞ –≤ —Ñ—É—Ç–µ—Ä–µ —Å–µ–∫—Ü–∏–∏ {section_idx}")
                        except Exception as e:
                            print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ—É—Ç–µ—Ä–µ —Å–µ–∫—Ü–∏–∏ {section_idx}[{para_idx}]: {e}")
                            continue
            except Exception as e:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å–µ–∫—Ü–∏–∏ {section_idx}: {e}")
                continue

        print(f"üìä –í—Å–µ–≥–æ –∑–∞–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {replacements_made}")

        if replacements_made == 0:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏ –æ–¥–Ω–æ–≥–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å: {{ –ò–º—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π }}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print("\nüìã –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            for table_idx, table in enumerate(doc.tables):
                print(f"  –¢–∞–±–ª–∏—Ü–∞ {table_idx + 1}:")
                for row_idx, row in enumerate(table.rows):
                    for cell_idx, cell in enumerate(row.cells):
                        if cell.text.strip():
                            print(f"    [{row_idx + 1}][{cell_idx + 1}]: {cell.text[:200]}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc.save(output_path)
        print(f"üíæ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")

        return True

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        raise e


def alternative_cell_replacement(cell, data):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–º–µ–Ω—ã –≤ —è—á–µ–π–∫–µ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —è—á–µ–π–∫–∏
        cell_text = cell.text

        if not cell_text or '{{' not in cell_text:
            return False

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ
        modified_text = cell_text
        for key, value in data.items():
            placeholder = '{{ ' + key + ' }}'
            if placeholder in modified_text:
                modified_text = modified_text.replace(placeholder, str(value or ''))

        # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ
        if modified_text == cell_text:
            return False

        # –û—á–∏—â–∞–µ–º —è—á–µ–π–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        cell.clear()
        paragraph = cell.paragraphs[0]  # –ü–æ—Å–ª–µ clear() –æ—Å—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω –ø—É—Å—Ç–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
        paragraph.add_run(modified_text)

        print(f"        üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∑–∞–º–µ–Ω–∞: '{cell_text[:50]}...' ‚Üí '{modified_text[:50]}...'")
        return True

    except Exception as e:
        print(f"        ‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∑–∞–º–µ–Ω—ã: {e}")
        return False


def analyze_table_structure(template_path):
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
    try:
        doc = Document(template_path)

        print(f"\nüìä –ê–ù–ê–õ–ò–ó –¢–ê–ë–õ–ò–¶ –í –î–û–ö–£–ú–ï–ù–¢–ï: {template_path}")
        print("=" * 60)

        for table_idx, table in enumerate(doc.tables):
            print(f"\nüîç –¢–∞–±–ª–∏—Ü–∞ {table_idx + 1}:")
            print(f"   –°—Ç—Ä–æ–∫: {len(table.rows)}")

            for row_idx, row in enumerate(table.rows):
                print(f"   –°—Ç—Ä–æ–∫–∞ {row_idx + 1}: {len(row.cells)} —è—á–µ–µ–∫")

                for cell_idx, cell in enumerate(row.cells):
                    cell_text = cell.text.strip()
                    if cell_text:
                        print(
                            f"     –Ø—á–µ–π–∫–∞ [{row_idx + 1}][{cell_idx + 1}]: '{cell_text[:100]}{'...' if len(cell_text) > 100 else ''}'")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
                        if '{{' in cell_text:
                            import re
                            placeholders = re.findall(r'\{\{[^}]*\}\}', cell_text)
                            print(f"       üéØ –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã: {placeholders}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–±–ª–∏—Ü: {e}")
        return False


def diagnose_document_placeholders(template_path):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
    try:
        doc = Document(template_path)
        placeholders_found = set()

        # –ü–æ–∏—Å–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        for paragraph in doc.paragraphs:
            text = paragraph.text
            # –ò—â–µ–º –≤—Å–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ {{ text }}
            matches = re.findall(r'\{\{\s*([^}]+)\s*\}\}', text)
            for match in matches:
                placeholders_found.add(match.strip())

        # –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    for paragraph in cell.paragraphs:
                        text = paragraph.text
                        matches = re.findall(r'\{\{\s*([^}]+)\s*\}\}', text)
                        for match in matches:
                            placeholders_found.add(match.strip())

        # –ü–æ–∏—Å–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∏ —Ñ—É—Ç–µ—Ä–∞—Ö
        for section in doc.sections:
            if hasattr(section, 'header') and section.header:
                for paragraph in section.header.paragraphs:
                    text = paragraph.text
                    matches = re.findall(r'\{\{\s*([^}]+)\s*\}\}', text)
                    for match in matches:
                        placeholders_found.add(match.strip())

            if hasattr(section, 'footer') and section.footer:
                for paragraph in section.footer.paragraphs:
                    text = paragraph.text
                    matches = re.findall(r'\{\{\s*([^}]+)\s*\}\}', text)
                    for match in matches:
                        placeholders_found.add(match.strip())

        return list(placeholders_found)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        return []


def calculate_file_hash(file_path):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ö—ç—à —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏"""
    hash_md5 = hashlib.md5()
    try:
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ö—ç—à–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return "error"


def debug_file_contents(file_path, max_chars=500):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        doc = Document(file_path)
        text_content = []

        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
        for i, paragraph in enumerate(doc.paragraphs[:5]):
            if paragraph.text.strip():
                text_content.append(f"–ü{i}: {paragraph.text[:100]}...")

        content_preview = " | ".join(text_content)
        return content_preview[:max_chars] if content_preview else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}"


def debug_template_processing(templates, template_ids):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
    print(f"\nüîç –û–¢–õ–ê–î–ö–ê –®–ê–ë–õ–û–ù–û–í:")
    print(f"   –ü–æ–ª—É—á–µ–Ω–æ ID —à–∞–±–ª–æ–Ω–æ–≤: {template_ids}")
    print(f"   –ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤ –≤ –ë–î: {len(templates)}")

    for i, template in enumerate(templates):
        print(f"\n   üìã –®–∞–±–ª–æ–Ω #{i + 1}:")
        print(f"      ID: {template.id}")
        print(f"      –ù–∞–∑–≤–∞–Ω–∏–µ: '{template.name}'")
        print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: '{template.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}'")
        print(f"      –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {template.created_at}")
        print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {len(template.files)}")

        for j, template_file in enumerate(template.files):
            file_path = os.path.join('uploads/templates', template_file.filename)
            file_exists = os.path.exists(file_path)
            file_size = os.path.getsize(file_path) if file_exists else 0
            file_hash = calculate_file_hash(file_path) if file_exists else "N/A"

            print(f"         üìÑ –§–∞–π–ª #{j + 1}:")
            print(f"            ID –≤ –ë–î: {template_file.id}")
            print(f"            –û—Ä–∏–≥–∏–Ω–∞–ª: {template_file.original_filename}")
            print(f"            –°–∏—Å—Ç–µ–º–∞: {template_file.filename}")
            print(f"            –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if file_exists else '‚ùå'}")
            print(f"            –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
            print(f"            MD5: {file_hash}")
            print(f"            –ó–∞–≥—Ä—É–∂–µ–Ω: {template_file.uploaded_at}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤
            if file_exists:
                try:
                    content_preview = debug_file_contents(file_path, 100)
                    print(f"            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {content_preview}")
                except Exception as e:
                    print(f"            –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ö—ç—à–∏ –≤ –æ–¥–Ω–æ–º —à–∞–±–ª–æ–Ω–µ
        file_hashes = []
        for template_file in template.files:
            file_path = os.path.join('uploads/templates', template_file.filename)
            if os.path.exists(file_path):
                file_hash = calculate_file_hash(file_path)
                file_hashes.append((template_file.original_filename, file_hash))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        seen_hashes = set()
        duplicates = []
        for filename, hash_val in file_hashes:
            if hash_val in seen_hashes:
                duplicates.append(filename)
            seen_hashes.add(hash_val)

        if duplicates:
            print(f"      ‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –§–ê–ô–õ–´: {duplicates}")
        else:
            print(f"      ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã")