from flask import render_template, request, redirect, url_for, flash, send_file, jsonify
from werkzeug.utils import secure_filename
import os
import zipfile
import tempfile
import shutil
import time
import random
from datetime import datetime

from models import db, Client, Organization, ContractTemplate, TemplateFile
from utils import (
    normalize_url, clean_filename, process_docx_template_safe,
    diagnose_document_placeholders, calculate_file_hash,
    debug_file_contents, debug_template_processing
)


def register_routes(app):
    @app.route('/')
    def index():
        return render_template('index.html')

    # ===== –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –ö–õ–ò–ï–ù–¢–û–í =====

    @app.route('/clients')
    def clients():
        clients = Client.query.all()
        return render_template('clients.html', clients=clients)

    @app.route('/clients/add', methods=['GET', 'POST'])
    def add_client():
        if request.method == 'POST':
            client = Client(
                number=request.form['number'],
                full_name=request.form['full_name'],
                short_name=request.form['short_name'],
                inn=request.form['inn'],
                ogrn=request.form['ogrn'],
                address=request.form['address'],
                position=request.form['position'],
                position_genitive=request.form['position_genitive'],
                representative_name=request.form['representative_name'],
                representative_name_genitive=request.form['representative_name_genitive'],
                basis=request.form['basis'],
                bank_details=request.form['bank_details'],
                phone=request.form['phone'],
                email=request.form['email'],
                website=normalize_url(request.form['website'])
            )

            try:
                db.session.add(client)
                db.session.commit()
                flash('–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success')
                return redirect(url_for('clients'))
            except Exception as e:
                db.session.rollback()
                flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}', 'error')

        return render_template('add_client.html')

    @app.route('/clients/edit/<int:id>', methods=['GET', 'POST'])
    def edit_client(id):
        client = Client.query.get_or_404(id)

        if request.method == 'POST':
            client.number = request.form['number']
            client.full_name = request.form['full_name']
            client.short_name = request.form['short_name']
            client.inn = request.form['inn']
            client.ogrn = request.form['ogrn']
            client.address = request.form['address']
            client.position = request.form['position']
            client.position_genitive = request.form['position_genitive']
            client.representative_name = request.form['representative_name']
            client.representative_name_genitive = request.form['representative_name_genitive']
            client.basis = request.form['basis']
            client.bank_details = request.form['bank_details']
            client.phone = request.form['phone']
            client.email = request.form['email']
            client.website = normalize_url(request.form['website'])

            try:
                db.session.commit()
                flash('–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success')
                return redirect(url_for('clients'))
            except Exception as e:
                db.session.rollback()
                flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}', 'error')

        return render_template('edit_client.html', client=client)

    @app.route('/clients/delete/<int:id>')
    def delete_client(id):
        client = Client.query.get_or_404(id)
        try:
            db.session.delete(client)
            db.session.commit()
            flash('–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', 'success')
        except Exception as e:
            db.session.rollback()
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}', 'error')

        return redirect(url_for('clients'))

    # ===== –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ô =====

    @app.route('/organizations')
    def organizations():
        organizations = Organization.query.all()
        return render_template('organizations.html', organizations=organizations)

    @app.route('/organizations/add', methods=['GET', 'POST'])
    def add_organization():
        if request.method == 'POST':
            organization = Organization(
                signatory_position=request.form['signatory_position'],
                signatory_name=request.form['signatory_name'],
                signatory_power_of_attorney=request.form['signatory_power_of_attorney'],
                executor_position=request.form['executor_position'],
                executor_name=request.form['executor_name']
            )

            try:
                db.session.add(organization)
                db.session.commit()
                flash('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success')
                return redirect(url_for('organizations'))
            except Exception as e:
                db.session.rollback()
                flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}', 'error')

        return render_template('add_organization.html')

    @app.route('/organizations/edit/<int:id>', methods=['GET', 'POST'])
    def edit_organization(id):
        organization = Organization.query.get_or_404(id)

        if request.method == 'POST':
            organization.signatory_position = request.form['signatory_position']
            organization.signatory_name = request.form['signatory_name']
            organization.signatory_power_of_attorney = request.form['signatory_power_of_attorney']
            organization.executor_position = request.form['executor_position']
            organization.executor_name = request.form['executor_name']

            try:
                db.session.commit()
                flash('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success')
                return redirect(url_for('organizations'))
            except Exception as e:
                db.session.rollback()
                flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}', 'error')

        return render_template('edit_organization.html', organization=organization)

    @app.route('/organizations/delete/<int:id>')
    def delete_organization(id):
        organization = Organization.query.get_or_404(id)
        try:
            db.session.delete(organization)
            db.session.commit()
            flash('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!', 'success')
        except Exception as e:
            db.session.rollback()
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}', 'error')

        return redirect(url_for('organizations'))

    # ===== –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –®–ê–ë–õ–û–ù–û–í =====

    @app.route('/templates')
    def templates():
        templates = ContractTemplate.query.all()
        return render_template('templates.html', templates=templates)

    @app.route('/templates/upload', methods=['POST'])
    def upload_template():
        if 'files' not in request.files:
            flash('–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã', 'error')
            return redirect(url_for('templates'))

        files = request.files.getlist('files')
        template_name = request.form.get('name', '').strip()

        if not template_name:
            flash('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞', 'error')
            return redirect(url_for('templates'))

        valid_files = []
        for file in files:
            if file.filename != '' and file.filename.endswith('.docx'):
                valid_files.append(file)

        if not valid_files:
            flash('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª .docx', 'error')
            return redirect(url_for('templates'))

        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
            template = ContractTemplate(
                name=template_name,
                description=request.form.get('description', '')
            )
            db.session.add(template)
            db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID —à–∞–±–ª–æ–Ω–∞

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
            for i, file in enumerate(valid_files):
                filename = secure_filename(file.filename)
                # –î–æ–±–∞–≤–ª—è–µ–º timestamp —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏ –∏ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_%f')
                random_suffix = random.randint(1000, 9999)
                unique_filename = f"{timestamp}_{random_suffix}_{i:02d}_{filename}"
                filepath = os.path.join(app.config['UPLOAD_FOLDER'], unique_filename)

                print(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ #{i + 1}:")
                print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è: {filename}")
                print(f"   –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è: {unique_filename}")
                print(f"   –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {filepath}")

                file.save(filepath)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
                if os.path.exists(filepath):
                    saved_size = os.path.getsize(filepath)
                    saved_hash = calculate_file_hash(filepath)
                    print(f"   ‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —Ä–∞–∑–º–µ—Ä: {saved_size} –±–∞–π—Ç")
                    print(f"   üîê MD5: {saved_hash}")
                else:
                    print(f"   ‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è!")

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–∞–π–ª–µ
                template_file = TemplateFile(
                    template_id=template.id,
                    filename=unique_filename,
                    original_filename=filename
                )
                db.session.add(template_file)
                print(f"   üìù –ó–∞–ø–∏—Å—å –≤ –ë–î —Å–æ–∑–¥–∞–Ω–∞: ID —à–∞–±–ª–æ–Ω–∞ {template.id}, —Ñ–∞–π–ª {unique_filename}")

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —Ä–∞–∑–Ω—ã—Ö timestamp'–æ–≤
                time.sleep(0.01)

            db.session.commit()
            flash(f'–®–∞–±–ª–æ–Ω "{template_name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Å {len(valid_files)} —Ñ–∞–π–ª–∞–º–∏!', 'success')

        except Exception as e:
            db.session.rollback()
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {str(e)}', 'error')

        return redirect(url_for('templates'))

    @app.route('/templates/delete/<int:id>')
    def delete_template(id):
        template = ContractTemplate.query.get_or_404(id)

        try:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –¥–∏—Å–∫–∞
            for template_file in template.files:
                file_path = os.path.join(app.config['UPLOAD_FOLDER'], template_file.filename)
                if os.path.exists(file_path):
                    os.remove(file_path)

            # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ñ–∞–π–ª—ã —É–¥–∞–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑-–∑–∞ cascade)
            db.session.delete(template)
            db.session.commit()
            flash('–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', 'success')

        except Exception as e:
            db.session.rollback()
            flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {str(e)}', 'error')

        return redirect(url_for('templates'))

    @app.route('/templates/test/<int:id>')
    def test_template(id):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞"""
        template = ContractTemplate.query.get_or_404(id)

        print(f"\n=== –¢–ï–°–¢ –®–ê–ë–õ–û–ù–ê '{template.name}' ===")

        result = {
            'template_name': template.name,
            'template_description': template.description,
            'files_count': len(template.files),
            'files': []
        }

        for template_file in template.files:
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], template_file.filename)

            file_info = {
                'original_filename': template_file.original_filename,
                'system_filename': template_file.filename,
                'exists': os.path.exists(file_path),
                'size': 0,
                'hash': '',
                'placeholders': [],
                'content_preview': '',
                'error': None
            }

            if os.path.exists(file_path):
                try:
                    file_info['size'] = os.path.getsize(file_path)
                    file_info['hash'] = calculate_file_hash(file_path)
                    file_info['placeholders'] = diagnose_document_placeholders(file_path)
                    file_info['content_preview'] = debug_file_contents(file_path)

                    print(f"\nüìÑ –§–∞–π–ª: {template_file.original_filename}")
                    print(f"   –†–∞–∑–º–µ—Ä: {file_info['size']} –±–∞–π—Ç")
                    print(f"   MD5: {file_info['hash']}")
                    print(f"   –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã: {len(file_info['placeholders'])}")
                    print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {file_info['content_preview'][:100]}...")

                except Exception as e:
                    file_info['error'] = str(e)
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            else:
                file_info['error'] = '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
                print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

            result['files'].append(file_info)

        return jsonify(result)

    @app.route('/templates/debug/<int:id>')
    def debug_template_files(id):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤ –≤ —à–∞–±–ª–æ–Ω–µ"""
        template = ContractTemplate.query.get_or_404(id)

        result = {
            'template': {
                'id': template.id,
                'name': template.name,
                'description': template.description,
                'files_count': len(template.files)
            },
            'files': [],
            'analysis': {
                'duplicate_hashes': []
            }
        }

        file_hashes = {}

        for template_file in template.files:
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], template_file.filename)

            file_info = {
                'id': template_file.id,
                'original_filename': template_file.original_filename,
                'system_filename': template_file.filename,
                'uploaded_at': template_file.uploaded_at.isoformat(),
                'exists': os.path.exists(file_path),
                'size': 0,
                'hash': None,
                'content_preview': None,
                'placeholders': []
            }

            if os.path.exists(file_path):
                try:
                    file_info['size'] = os.path.getsize(file_path)
                    file_info['hash'] = calculate_file_hash(file_path)
                    file_info['content_preview'] = debug_file_contents(file_path, 300)
                    file_info['placeholders'] = diagnose_document_placeholders(file_path)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    if file_info['hash'] in file_hashes:
                        result['analysis']['duplicate_hashes'].append({
                            'hash': file_info['hash'],
                            'files': [file_hashes[file_info['hash']], template_file.original_filename]
                        })
                    else:
                        file_hashes[file_info['hash']] = template_file.original_filename

                except Exception as e:
                    file_info['error'] = str(e)

            result['files'].append(file_info)

        return jsonify(result)

    @app.route('/templates/diagnose/<int:id>')
    def diagnose_template(id):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —à–∞–±–ª–æ–Ω–∞"""
        template = ContractTemplate.query.get_or_404(id)

        result = {
            'template_name': template.name,
            'files': []
        }

        for template_file in template.files:
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], template_file.filename)
            if os.path.exists(file_path):
                placeholders = diagnose_document_placeholders(file_path)
                result['files'].append({
                    'filename': template_file.original_filename,
                    'placeholders': placeholders
                })
            else:
                result['files'].append({
                    'filename': template_file.original_filename,
                    'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
                })

        return jsonify(result)

    # ===== –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –î–û–ì–û–í–û–†–û–í =====

    @app.route('/contracts')
    def contracts():
        clients = Client.query.all()
        organizations = Organization.query.all()
        templates = ContractTemplate.query.all()
        return render_template('contracts.html', clients=clients, organizations=organizations, templates=templates)

    @app.route('/contracts/generate', methods=['POST'])
    def generate_contracts():
        client_id = request.form['client_id']
        organization_id = request.form['organization_id']
        template_ids = request.form.getlist('template_ids')

        if not client_id or not organization_id or not template_ids:
            flash('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏ —à–∞–±–ª–æ–Ω—ã', 'error')
            return redirect(url_for('contracts'))

        client = Client.query.get_or_404(client_id)
        organization = Organization.query.get_or_404(organization_id)
        templates = ContractTemplate.query.filter(ContractTemplate.id.in_(template_ids)).all()

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–±–ª–æ–Ω–∞—Ö
        debug_template_processing(templates, template_ids)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–º–µ–Ω—ã
        data = {
            '–ù–æ–º–µ—Ä': client.number,
            '–ü–æ–ª–Ω–æ–µ_–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': client.full_name,
            '–°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ_–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': client.short_name,
            '–ò–ù–ù': client.inn,
            '–û–ì–†–ù': client.ogrn,
            '–ê–¥—Ä–µ—Å': client.address,
            '–î–æ–ª–∂–Ω–æ—Å—Ç—å': client.position,
            '–î–æ–ª–∂–Ω–æ—Å—Ç—å_—Ä': client.position_genitive,
            '–§–ò–û_–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è': client.representative_name,
            '–§–ò–û_–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è_—Ä': client.representative_name_genitive,
            '–û—Å–Ω–æ–≤–∞–Ω–∏–µ': client.basis,
            '–†–µ–∫–≤–∏–∑–∏—Ç—ã': client.bank_details,
            '–¢–µ–ª–µ—Ñ–æ–Ω': client.phone,
            '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è_–ø–æ—á—Ç–∞': client.email,
            '–°–∞–π—Ç': client.website,
            '–î–æ–ª–∂–Ω–æ—Å—Ç—å_–ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞': organization.signatory_position,
            '–§–ò–û_–ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞': organization.signatory_name,
            '–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å_–ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞': organization.signatory_power_of_attorney,
            '–î–æ–ª–∂–Ω–æ—Å—Ç—å_–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è': organization.executor_position,
            '–§–ò–û_–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è': organization.executor_name,
            '–î–∞—Ç–∞': datetime.now().strftime('%d.%m.%Y')
        }

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print("\n=== –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–û–ì–û–í–û–†–û–í ===")
        print(f"–ö–ª–∏–µ–Ω—Ç: {client.full_name}")
        print(f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {organization.signatory_name}")
        print(f"–®–∞–±–ª–æ–Ω–æ–≤ –≤—ã–±—Ä–∞–Ω–æ: {len(templates)}")
        print(f"ID —à–∞–±–ª–æ–Ω–æ–≤: {template_ids}")
        print("\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–º–µ–Ω—ã:")
        for key, value in data.items():
            print(f"  {{ {key} }} = '{value}'")
        print()

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
        with tempfile.TemporaryDirectory() as temp_dir:
            generated_files = []
            used_filenames = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω
            base_timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∞
            client_short = client.short_name or client.full_name
            clean_client_name = clean_filename(client_short)

            for template_idx, template in enumerate(templates):
                print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–∞ #{template_idx + 1}: '{template.name}' (ID: {template.id})")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {template.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
                print(f"   –§–∞–π–ª–æ–≤ –≤ —à–∞–±–ª–æ–Ω–µ: {len(template.files)}")

                if not template.files:
                    print(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í —à–∞–±–ª–æ–Ω–µ '{template.name}' –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤!")
                    continue

                for file_idx, template_file in enumerate(template.files):
                    template_path = os.path.join(app.config['UPLOAD_FOLDER'], template_file.filename)

                    print(f"\n   üìÅ –§–∞–π–ª #{file_idx + 1} –≤ —à–∞–±–ª–æ–Ω–µ:")
                    print(f"      ID —Ñ–∞–π–ª–∞ –≤ –ë–î: {template_file.id}")
                    print(f"      –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è: {template_file.original_filename}")
                    print(f"      –°–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è: {template_file.filename}")
                    print(f"      –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {template_path}")
                    print(f"      –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {template_file.uploaded_at}")

                    if not os.path.exists(template_path):
                        print(f"      ‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                        flash(f'–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_file.original_filename}', 'error')
                        continue

                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
                    file_size = os.path.getsize(template_path)
                    file_hash = calculate_file_hash(template_path)
                    print(f"      üìä –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                    print(f"      üîê MD5 –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_hash}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                    try:
                        doc_preview = debug_file_contents(template_path, 200)
                        print(f"      üìÑ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä: {doc_preview}")
                    except Exception as e:
                        print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {e}")

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                    clean_original_name = clean_filename(template_file.original_filename)

                    # –ë–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                    base_filename = f"{clean_client_name}_{clean_original_name}_{base_timestamp}"
                    output_filename = f"{base_filename}.docx"

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    counter = 1
                    while output_filename in used_filenames:
                        output_filename = f"{base_filename}_{counter:02d}.docx"
                        counter += 1

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
                    used_filenames.add(output_filename)
                    output_path = os.path.join(temp_dir, output_filename)

                    print(f"      üì§ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_filename}")

                    try:
                        print(f"      üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")

                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        process_docx_template_safe(template_path, output_path, data)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
                        if os.path.exists(output_path):
                            file_size = os.path.getsize(output_path)
                            output_hash = calculate_file_hash(output_path)
                            generated_files.append(output_path)
                            print(f"      ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
                            print(f"      üîê MD5 –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {output_hash}")

                            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö—ç—à–∏
                            if output_hash == file_hash:
                                print(f"      ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –∏—Å—Ö–æ–¥–Ω–æ–º—É (–∑–∞–º–µ–Ω—ã –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ)")
                            else:
                                print(f"      ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—Ö—ç—à –∏–∑–º–µ–Ω–∏–ª—Å—è)")

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                            try:
                                output_preview = debug_file_contents(output_path, 200)
                                print(f"      üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {output_preview}")
                            except Exception as e:
                                print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                        else:
                            print(f"      ‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω!")
                            flash(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è {template_file.original_filename}', 'error')

                    except Exception as e:
                        print(f"      üí• –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
                        print("      üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
                        import traceback
                        traceback.print_exc()
                        flash(
                            f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {template_file.original_filename} –∏–∑ —à–∞–±–ª–æ–Ω–∞ {template.name}: {str(e)}',
                            'error')
                        continue

            print(f"\nüìä –ò–¢–û–ì–ò –ì–ï–ù–ï–†–ê–¶–ò–ò:")
            print(f"   –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(generated_files)}")

            if generated_files:
                print("   üìã –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
                for i, file_path in enumerate(generated_files, 1):
                    file_name = os.path.basename(file_path)
                    file_size = os.path.getsize(file_path)
                    print(f"      {i}. {file_name} ({file_size} –±–∞–π—Ç)")

                # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
                archive_name = f"contracts_{clean_client_name}_{base_timestamp}.zip"
                archive_path = os.path.join(app.config['OUTPUT_FOLDER'], archive_name)

                print(f"\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞: {archive_name}")
                try:
                    with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                        for file_path in generated_files:
                            file_name = os.path.basename(file_path)
                            zipf.write(file_path, file_name)
                            print(f"      ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤: {file_name}")

                    archive_size = os.path.getsize(archive_path)
                    print(f"üì¶ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! –†–∞–∑–º–µ—Ä: {archive_size} –±–∞–π—Ç")
                    return send_file(archive_path, as_attachment=True, download_name=archive_name)

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {e}")
                    flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {str(e)}', 'error')
                    return redirect(url_for('contracts'))
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
                flash('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —à–∞–±–ª–æ–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ.', 'error')
                return redirect(url_for('contracts'))
