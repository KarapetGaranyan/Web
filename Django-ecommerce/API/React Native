// api/client.js - Базовый API клиент
const BASE_URL = 'http://127.0.0.1:8000';

class ApiClient {
  constructor() {
    this.token = null;
  }

  async setToken(token) {
    this.token = token;
  }

  async request(endpoint, options = {}) {
    const url = `${BASE_URL}${endpoint}`;
    const headers = {
      'Content-Type': 'application/json',
      ...options.headers,
    };

    if (this.token) {
      headers.Authorization = `Bearer ${this.token}`;
    }

    try {
      const response = await fetch(url, {
        ...options,
        headers,
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('API request failed:', error);
      throw error;
    }
  }

  // Аутентификация
  async login(username, password) {
    const data = await this.request('/api/auth/jwt/create/', {
      method: 'POST',
      body: JSON.stringify({ username, password }),
    });

    this.token = data.access;
    return data;
  }

  async register(username, email, password) {
    return this.request('/api/auth/users/', {
      method: 'POST',
      body: JSON.stringify({ username, email, password }),
    });
  }

  // Товары
  async getProducts(filters = {}) {
    const params = new URLSearchParams(filters);
    return this.request(`/api/shop/products/?${params}`);
  }

  async getProduct(slug) {
    return this.request(`/api/shop/products/${slug}/`);
  }

  async getCategories() {
    return this.request('/api/shop/categories/');
  }

  // Корзина
  async getCart() {
    return this.request('/api/shop/cart/');
  }

  async addToCart(productId, quantity = 1) {
    return this.request('/api/shop/cart/add/', {
      method: 'POST',
      body: JSON.stringify({
        product_id: productId,
        quantity,
      }),
    });
  }

  async updateCartItem(itemId, quantity) {
    return this.request(`/api/shop/cart/update/${itemId}/`, {
      method: 'PUT',
      body: JSON.stringify({ quantity }),
    });
  }

  async removeFromCart(itemId) {
    return this.request(`/api/shop/cart/remove/${itemId}/`, {
      method: 'DELETE',
    });
  }

  // Заказы
  async createOrder(orderData) {
    return this.request('/api/shop/orders/create/', {
      method: 'POST',
      body: JSON.stringify(orderData),
    });
  }

  async getOrders() {
    return this.request('/api/shop/orders/');
  }

  async getOrder(orderId) {
    return this.request(`/api/shop/orders/${orderId}/`);
  }
}

export default new ApiClient();

// components/ProductList.js - Компонент списка товаров
import React, { useState, useEffect } from 'react';
import { View, Text, FlatList, Image, TouchableOpacity, StyleSheet } from 'react-native';
import ApiClient from '../api/client';

const ProductList = ({ navigation }) => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadProducts();
  }, []);

  const loadProducts = async () => {
    try {
      const data = await ApiClient.getProducts();
      setProducts(data.results);
    } catch (error) {
      console.error('Failed to load products:', error);
    } finally {
      setLoading(false);
    }
  };

  const renderProduct = ({ item }) => (
    <TouchableOpacity
      style={styles.productCard}
      onPress={() => navigation.navigate('ProductDetail', { slug: item.slug })}
    >
      {item.main_image && (
        <Image
          source={{ uri: `http://127.0.0.1:8000${item.main_image.image}` }}
          style={styles.productImage}
        />
      )}
      <View style={styles.productInfo}>
        <Text style={styles.productName}>{item.name}</Text>
        <Text style={styles.productCategory}>{item.category.name}</Text>
        <View style={styles.priceContainer}>
          {item.old_price && (
            <Text style={styles.oldPrice}>{item.old_price} ₽</Text>
          )}
          <Text style={styles.price}>{item.price} ₽</Text>
          {item.discount_percentage > 0 && (
            <Text style={styles.discount}>-{item.discount_percentage}%</Text>
          )}
        </View>
        <Text style={styles.rating}>⭐ {item.rating}/5</Text>
      </View>
    </TouchableOpacity>
  );

  if (loading) {
    return (
      <View style={styles.centered}>
        <Text>Загрузка товаров...</Text>
      </View>
    );
  }

  return (
    <FlatList
      data={products}
      renderItem={renderProduct}
      keyExtractor={(item) => item.id.toString()}
      numColumns={2}
      contentContainerStyle={styles.container}
    />
  );
};

// components/Cart.js - Компонент корзины
import React, { useState, useEffect } from 'react';
import { View, Text, FlatList, TouchableOpacity, Alert } from 'react-native';
import ApiClient from '../api/client';

const Cart = ({ navigation }) => {
  const [cart, setCart] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadCart();
  }, []);

  const loadCart = async () => {
    try {
      const data = await ApiClient.getCart();
      setCart(data);
    } catch (error) {
      console.error('Failed to load cart:', error);
    } finally {
      setLoading(false);
    }
  };

  const updateQuantity = async (itemId, quantity) => {
    try {
      await ApiClient.updateCartItem(itemId, quantity);
      loadCart(); // Перезагружаем корзину
    } catch (error) {
      Alert.alert('Ошибка', 'Не удалось обновить количество');
    }
  };

  const removeItem = async (itemId) => {
    try {
      await ApiClient.removeFromCart(itemId);
      loadCart(); // Перезагружаем корзину
    } catch (error) {
      Alert.alert('Ошибка', 'Не удалось удалить товар');
    }
  };

  const checkout = () => {
    navigation.navigate('Checkout', { cart });
  };

  const renderCartItem = ({ item }) => (
    <View style={styles.cartItem}>
      <Text style={styles.itemName}>{item.product.name}</Text>
      <Text style={styles.itemPrice}>{item.product.price} ₽</Text>

      <View style={styles.quantityContainer}>
        <TouchableOpacity
          onPress={() => updateQuantity(item.id, item.quantity - 1)}
          style={styles.quantityButton}
        >
          <Text>-</Text>
        </TouchableOpacity>

        <Text style={styles.quantity}>{item.quantity}</Text>

        <TouchableOpacity
          onPress={() => updateQuantity(item.id, item.quantity + 1)}
          style={styles.quantityButton}
        >
          <Text>+</Text>
        </TouchableOpacity>
      </View>

      <Text style={styles.totalPrice}>{item.total_price} ₽</Text>

      <TouchableOpacity
        onPress={() => removeItem(item.id)}
        style={styles.removeButton}
      >
        <Text style={styles.removeText}>Удалить</Text>
      </TouchableOpacity>
    </View>
  );

  if (loading) {
    return (
      <View style={styles.centered}>
        <Text>Загрузка корзины...</Text>
      </View>
    );
  }

  if (!cart || cart.items.length === 0) {
    return (
      <View style={styles.centered}>
        <Text>Корзина пуста</Text>
        <TouchableOpacity
          onPress={() => navigation.navigate('Products')}
          style={styles.shopButton}
        >
          <Text>Перейти к покупкам</Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <FlatList
        data={cart.items}
        renderItem={renderCartItem}
        keyExtractor={(item) => item.id.toString()}
      />

      <View style={styles.totalContainer}>
        <Text style={styles.totalText}>
          Итого: {cart.total_price} ₽ ({cart.total_items} товаров)
        </Text>

        <TouchableOpacity onPress={checkout} style={styles.checkoutButton}>
          <Text style={styles.checkoutText}>Оформить заказ</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
  },
  centered: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  productCard: {
    flex: 1,
    margin: 8,
    backgroundColor: 'white',
    borderRadius: 8,
    padding: 12,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
  },
  productImage: {
    width: '100%',
    height: 150,
    borderRadius: 8,
    marginBottom: 8,
  },
  productInfo: {
    flex: 1,
  },
  productName: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  productCategory: {
    fontSize: 12,
    color: '#666',
    marginBottom: 8,
  },
  priceContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 4,
  },
  price: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#007bff',
  },
  oldPrice: {
    fontSize: 14,
    textDecorationLine: 'line-through',
    color: '#999',
    marginRight: 8,
  },
  discount: {
    fontSize: 12,
    color: 'red',
    marginLeft: 8,
  },
  rating: {
    fontSize: 12,
    color: '#666',
  },
  // Стили для корзины
  cartItem: {
    backgroundColor: 'white',
    padding: 16,
    marginBottom: 8,
    borderRadius: 8,
  },
  itemName: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  quantityContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 8,
  },
  quantityButton: {
    backgroundColor: '#ddd',
    padding: 8,
    borderRadius: 4,
  },
  quantity: {
    marginHorizontal: 16,
    fontSize: 16,
  },
  totalContainer: {
    borderTopWidth: 1,
    borderTopColor: '#ddd',
    padding: 16,
  },
  totalText: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 16,
  },
  checkoutButton: {
    backgroundColor: '#007bff',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
  },
  checkoutText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export { ProductList, Cart };